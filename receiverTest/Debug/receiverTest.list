
receiverTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005154  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080059b8  080059b8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059b8  080059b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080059c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000078  08005a38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005a38  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc1e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f0  00000000  00000000  0002ccbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000300d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abcb  00000000  00000000  00030cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f346  00000000  00000000  0004b8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af5c  00000000  00000000  0005ac09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5b65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f8  00000000  00000000  000f5bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08005320 	.word	0x08005320

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08005320 	.word	0x08005320

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <CS_Select>:
#define NRF24_CSN_PORT   GPIOC
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	4802      	ldr	r0, [pc, #8]	; (8000248 <CS_Select+0x14>)
 800023e:	f002 fd8f 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40011000 	.word	0x40011000

0800024c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2140      	movs	r1, #64	; 0x40
 8000254:	4802      	ldr	r0, [pc, #8]	; (8000260 <CS_UnSelect+0x14>)
 8000256:	f002 fd83 	bl	8002d60 <HAL_GPIO_WritePin>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40011000 	.word	0x40011000

08000264 <CE_Enable>:


void CE_Enable (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2120      	movs	r1, #32
 800026c:	4802      	ldr	r0, [pc, #8]	; (8000278 <CE_Enable+0x14>)
 800026e:	f002 fd77 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40011000 	.word	0x40011000

0800027c <CE_Disable>:

void CE_Disable (void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2120      	movs	r1, #32
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <CE_Disable+0x14>)
 8000286:	f002 fd6b 	bl	8002d60 <HAL_GPIO_WritePin>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40011000 	.word	0x40011000

08000294 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002b2:	f7ff ffbf 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002b6:	f107 010c 	add.w	r1, r7, #12
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	2202      	movs	r2, #2
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <nrf24_WriteReg+0x40>)
 80002c2:	f003 fbbf 	bl	8003a44 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002c6:	f7ff ffc1 	bl	800024c <CS_UnSelect>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000138 	.word	0x20000138

080002d8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	f043 0320 	orr.w	r3, r3, #32
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002f0:	f7ff ffa0 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002f4:	f107 0114 	add.w	r1, r7, #20
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	2201      	movs	r2, #1
 80002fc:	4808      	ldr	r0, [pc, #32]	; (8000320 <nrf24_WriteRegMulti+0x48>)
 80002fe:	f003 fba1 	bl	8003a44 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	b29a      	uxth	r2, r3
 8000306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030a:	68b9      	ldr	r1, [r7, #8]
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <nrf24_WriteRegMulti+0x48>)
 800030e:	f003 fb99 	bl	8003a44 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000312:	f7ff ff9b 	bl	800024c <CS_UnSelect>
}
 8000316:	bf00      	nop
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000138 	.word	0x20000138

08000324 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800032e:	2300      	movs	r3, #0
 8000330:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000332:	f7ff ff7f 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000336:	1df9      	adds	r1, r7, #7
 8000338:	2364      	movs	r3, #100	; 0x64
 800033a:	2201      	movs	r2, #1
 800033c:	4808      	ldr	r0, [pc, #32]	; (8000360 <nrf24_ReadReg+0x3c>)
 800033e:	f003 fb81 	bl	8003a44 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000342:	f107 010f 	add.w	r1, r7, #15
 8000346:	2364      	movs	r3, #100	; 0x64
 8000348:	2201      	movs	r2, #1
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <nrf24_ReadReg+0x3c>)
 800034c:	f003 fcb6 	bl	8003cbc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000350:	f7ff ff7c 	bl	800024c <CS_UnSelect>

	return data;
 8000354:	7bfb      	ldrb	r3, [r7, #15]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000138 	.word	0x20000138

08000364 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000372:	f7ff ff5f 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000376:	f107 010f 	add.w	r1, r7, #15
 800037a:	2364      	movs	r3, #100	; 0x64
 800037c:	2201      	movs	r2, #1
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <nrf24_ReadReg_Multi+0x3c>)
 8000380:	f003 fb60 	bl	8003a44 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	b29a      	uxth	r2, r3
 8000388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038c:	68b9      	ldr	r1, [r7, #8]
 800038e:	4804      	ldr	r0, [pc, #16]	; (80003a0 <nrf24_ReadReg_Multi+0x3c>)
 8000390:	f003 fc94 	bl	8003cbc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000394:	f7ff ff5a 	bl	800024c <CS_UnSelect>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000138 	.word	0x20000138

080003a4 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80003ae:	f7ff ff41 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80003b2:	1df9      	adds	r1, r7, #7
 80003b4:	2364      	movs	r3, #100	; 0x64
 80003b6:	2201      	movs	r2, #1
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <nrfsendCmd+0x28>)
 80003ba:	f003 fb43 	bl	8003a44 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80003be:	f7ff ff45 	bl	800024c <CS_UnSelect>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000138 	.word	0x20000138

080003d0 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b07      	cmp	r3, #7
 80003de:	d104      	bne.n	80003ea <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80003e0:	2100      	movs	r1, #0
 80003e2:	2007      	movs	r0, #7
 80003e4:	f7ff ff56 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80003e8:	e090      	b.n	800050c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2b17      	cmp	r3, #23
 80003ee:	d104      	bne.n	80003fa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003f0:	2111      	movs	r1, #17
 80003f2:	2017      	movs	r0, #23
 80003f4:	f7ff ff4e 	bl	8000294 <nrf24_WriteReg>
}
 80003f8:	e088      	b.n	800050c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80003fa:	2108      	movs	r1, #8
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ff49 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000402:	213f      	movs	r1, #63	; 0x3f
 8000404:	2001      	movs	r0, #1
 8000406:	f7ff ff45 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800040a:	2103      	movs	r1, #3
 800040c:	2002      	movs	r0, #2
 800040e:	f7ff ff41 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000412:	2103      	movs	r1, #3
 8000414:	2003      	movs	r0, #3
 8000416:	f7ff ff3d 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800041a:	2103      	movs	r1, #3
 800041c:	2004      	movs	r0, #4
 800041e:	f7ff ff39 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000422:	2102      	movs	r1, #2
 8000424:	2005      	movs	r0, #5
 8000426:	f7ff ff35 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800042a:	210e      	movs	r1, #14
 800042c:	2006      	movs	r0, #6
 800042e:	f7ff ff31 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000432:	2100      	movs	r1, #0
 8000434:	2007      	movs	r0, #7
 8000436:	f7ff ff2d 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800043a:	2100      	movs	r1, #0
 800043c:	2008      	movs	r0, #8
 800043e:	f7ff ff29 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000442:	2100      	movs	r1, #0
 8000444:	2009      	movs	r0, #9
 8000446:	f7ff ff25 	bl	8000294 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800044a:	4a32      	ldr	r2, [pc, #200]	; (8000514 <nrf24_reset+0x144>)
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000454:	6018      	str	r0, [r3, #0]
 8000456:	3304      	adds	r3, #4
 8000458:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2205      	movs	r2, #5
 8000460:	4619      	mov	r1, r3
 8000462:	200a      	movs	r0, #10
 8000464:	f7ff ff38 	bl	80002d8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000468:	4a2b      	ldr	r2, [pc, #172]	; (8000518 <nrf24_reset+0x148>)
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000472:	6018      	str	r0, [r3, #0]
 8000474:	3304      	adds	r3, #4
 8000476:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	2205      	movs	r2, #5
 800047e:	4619      	mov	r1, r3
 8000480:	200b      	movs	r0, #11
 8000482:	f7ff ff29 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000486:	21c3      	movs	r1, #195	; 0xc3
 8000488:	200c      	movs	r0, #12
 800048a:	f7ff ff03 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800048e:	21c4      	movs	r1, #196	; 0xc4
 8000490:	200d      	movs	r0, #13
 8000492:	f7ff feff 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000496:	21c5      	movs	r1, #197	; 0xc5
 8000498:	200e      	movs	r0, #14
 800049a:	f7ff fefb 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800049e:	21c6      	movs	r1, #198	; 0xc6
 80004a0:	200f      	movs	r0, #15
 80004a2:	f7ff fef7 	bl	8000294 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80004a6:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <nrf24_reset+0x144>)
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b0:	6018      	str	r0, [r3, #0]
 80004b2:	3304      	adds	r3, #4
 80004b4:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	2205      	movs	r2, #5
 80004bc:	4619      	mov	r1, r3
 80004be:	2010      	movs	r0, #16
 80004c0:	f7ff ff0a 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80004c4:	2100      	movs	r1, #0
 80004c6:	2011      	movs	r0, #17
 80004c8:	f7ff fee4 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80004cc:	2100      	movs	r1, #0
 80004ce:	2012      	movs	r0, #18
 80004d0:	f7ff fee0 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80004d4:	2100      	movs	r1, #0
 80004d6:	2013      	movs	r0, #19
 80004d8:	f7ff fedc 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80004dc:	2100      	movs	r1, #0
 80004de:	2014      	movs	r0, #20
 80004e0:	f7ff fed8 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80004e4:	2100      	movs	r1, #0
 80004e6:	2015      	movs	r0, #21
 80004e8:	f7ff fed4 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80004ec:	2100      	movs	r1, #0
 80004ee:	2016      	movs	r0, #22
 80004f0:	f7ff fed0 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004f4:	2111      	movs	r1, #17
 80004f6:	2017      	movs	r0, #23
 80004f8:	f7ff fecc 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004fc:	2100      	movs	r1, #0
 80004fe:	201c      	movs	r0, #28
 8000500:	f7ff fec8 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000504:	2100      	movs	r1, #0
 8000506:	201d      	movs	r0, #29
 8000508:	f7ff fec4 	bl	8000294 <nrf24_WriteReg>
}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	08005338 	.word	0x08005338
 8000518:	08005340 	.word	0x08005340

0800051c <NRF24_Init>:




void NRF24_Init (void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000520:	f7ff feac 	bl	800027c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff53 	bl	80003d0 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800052a:	2100      	movs	r1, #0
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff feb1 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000532:	2100      	movs	r1, #0
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff fead 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800053a:	2100      	movs	r1, #0
 800053c:	2002      	movs	r0, #2
 800053e:	f7ff fea9 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000542:	2103      	movs	r1, #3
 8000544:	2003      	movs	r0, #3
 8000546:	f7ff fea5 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800054a:	2100      	movs	r1, #0
 800054c:	2004      	movs	r0, #4
 800054e:	f7ff fea1 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000552:	2100      	movs	r1, #0
 8000554:	2005      	movs	r0, #5
 8000556:	f7ff fe9d 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800055a:	210e      	movs	r1, #14
 800055c:	2006      	movs	r0, #6
 800055e:	f7ff fe99 	bl	8000294 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000562:	f7ff fe7f 	bl	8000264 <CE_Enable>

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}

0800056a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000576:	f7ff fe81 	bl	800027c <CE_Disable>

	nrf24_reset (STATUS);
 800057a:	2007      	movs	r0, #7
 800057c:	f7ff ff28 	bl	80003d0 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	4619      	mov	r1, r3
 8000584:	2005      	movs	r0, #5
 8000586:	f7ff fe85 	bl	8000294 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff feca 	bl	8000324 <nrf24_ReadReg>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	4619      	mov	r1, r3
 80005a0:	2002      	movs	r0, #2
 80005a2:	f7ff fe77 	bl	8000294 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80005a6:	2205      	movs	r2, #5
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	200b      	movs	r0, #11
 80005ac:	f7ff fe94 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80005b0:	21ee      	movs	r1, #238	; 0xee
 80005b2:	200c      	movs	r0, #12
 80005b4:	f7ff fe6e 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80005b8:	2120      	movs	r1, #32
 80005ba:	2013      	movs	r0, #19
 80005bc:	f7ff fe6a 	bl	8000294 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff feaf 	bl	8000324 <nrf24_ReadReg>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	f043 0303 	orr.w	r3, r3, #3
 80005d0:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fe5c 	bl	8000294 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80005dc:	f7ff fe42 	bl	8000264 <CE_Enable>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80005f0:	2007      	movs	r0, #7
 80005f2:	f7ff fe97 	bl	8000324 <nrf24_ReadReg>
 80005f6:	4603      	mov	r3, r0
 80005f8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <isDataAvailable+0x34>
 8000604:	7bfa      	ldrb	r2, [r7, #15]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4013      	ands	r3, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	d005      	beq.n	800061c <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	2007      	movs	r0, #7
 8000614:	f7ff fe3e 	bl	8000294 <nrf24_WriteReg>

		return 1;
 8000618:	2301      	movs	r3, #1
 800061a:	e000      	b.n	800061e <isDataAvailable+0x36>
	}

	return 0;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000634:	f7ff fdfe 	bl	8000234 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000638:	2361      	movs	r3, #97	; 0x61
 800063a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800063c:	f107 010f 	add.w	r1, r7, #15
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <NRF24_Receive+0x50>)
 8000646:	f003 f9fd 	bl	8003a44 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	2220      	movs	r2, #32
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <NRF24_Receive+0x50>)
 8000654:	f003 fb32 	bl	8003cbc <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000658:	f7ff fdf8 	bl	800024c <CS_UnSelect>

	HAL_Delay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 f91d 	bl	800189c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000662:	23e2      	movs	r3, #226	; 0xe2
 8000664:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fe9b 	bl	80003a4 <nrfsendCmd>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000138 	.word	0x20000138

0800067c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e00c      	b.n	80006a4 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	b2d9      	uxtb	r1, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	18d4      	adds	r4, r2, r3
 8000694:	4608      	mov	r0, r1
 8000696:	f7ff fe45 	bl	8000324 <nrf24_ReadReg>
 800069a:	4603      	mov	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3301      	adds	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b09      	cmp	r3, #9
 80006a8:	ddef      	ble.n	800068a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	330a      	adds	r3, #10
 80006ae:	2205      	movs	r2, #5
 80006b0:	4619      	mov	r1, r3
 80006b2:	200a      	movs	r0, #10
 80006b4:	f7ff fe56 	bl	8000364 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	330f      	adds	r3, #15
 80006bc:	2205      	movs	r2, #5
 80006be:	4619      	mov	r1, r3
 80006c0:	200b      	movs	r0, #11
 80006c2:	f7ff fe4f 	bl	8000364 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f103 0414 	add.w	r4, r3, #20
 80006cc:	200c      	movs	r0, #12
 80006ce:	f7ff fe29 	bl	8000324 <nrf24_ReadReg>
 80006d2:	4603      	mov	r3, r0
 80006d4:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f103 0415 	add.w	r4, r3, #21
 80006dc:	200d      	movs	r0, #13
 80006de:	f7ff fe21 	bl	8000324 <nrf24_ReadReg>
 80006e2:	4603      	mov	r3, r0
 80006e4:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 0416 	add.w	r4, r3, #22
 80006ec:	200e      	movs	r0, #14
 80006ee:	f7ff fe19 	bl	8000324 <nrf24_ReadReg>
 80006f2:	4603      	mov	r3, r0
 80006f4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 0417 	add.w	r4, r3, #23
 80006fc:	200f      	movs	r0, #15
 80006fe:	f7ff fe11 	bl	8000324 <nrf24_ReadReg>
 8000702:	4603      	mov	r3, r0
 8000704:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3318      	adds	r3, #24
 800070a:	2205      	movs	r2, #5
 800070c:	4619      	mov	r1, r3
 800070e:	200a      	movs	r0, #10
 8000710:	f7ff fe28 	bl	8000364 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000714:	231d      	movs	r3, #29
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	e00e      	b.n	8000738 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3b0c      	subs	r3, #12
 8000720:	b2d9      	uxtb	r1, r3
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	18d4      	adds	r4, r2, r3
 8000728:	4608      	mov	r0, r1
 800072a:	f7ff fdfb 	bl	8000324 <nrf24_ReadReg>
 800072e:	4603      	mov	r3, r0
 8000730:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	3301      	adds	r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	2b25      	cmp	r3, #37	; 0x25
 800073c:	dded      	ble.n	800071a <NRF24_ReadAll+0x9e>
	}

}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	e002      	b.n	8000758 <Delay+0x10>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3b01      	subs	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f9      	bne.n	8000752 <Delay+0xa>
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <LCD_INIT>:

void LCD_INIT ( void )
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f829 	bl	80007c8 <LCD_BackLed_Control>
	LCD_Rst();
 8000776:	f000 f80f 	bl	8000798 <LCD_Rst>
	LCD_REG_Config();
 800077a:	f000 f85f 	bl	800083c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800077e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000788:	22f0      	movs	r2, #240	; 0xf0
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f000 f9e6 	bl	8000b5e <LCD_Clear>
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <LCD_Rst+0x28>)
 80007a2:	f002 fadd 	bl	8002d60 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80007a6:	4807      	ldr	r0, [pc, #28]	; (80007c4 <LCD_Rst+0x2c>)
 80007a8:	f7ff ffce 	bl	8000748 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2102      	movs	r1, #2
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <LCD_Rst+0x28>)
 80007b2:	f002 fad5 	bl	8002d60 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80007b6:	4803      	ldr	r0, [pc, #12]	; (80007c4 <LCD_Rst+0x2c>)
 80007b8:	f7ff ffc6 	bl	8000748 <Delay>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40011800 	.word	0x40011800
 80007c4:	0002bffc 	.word	0x0002bffc

080007c8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d006      	beq.n	80007e6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <LCD_BackLed_Control+0x34>)
 80007e0:	f002 fabe 	bl	8002d60 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80007e4:	e005      	b.n	80007f2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <LCD_BackLed_Control+0x34>)
 80007ee:	f002 fab7 	bl	8002d60 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40011400 	.word	0x40011400

08000800 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800080a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	8013      	strh	r3, [r2, #0]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <LCD_Write_Data+0x1c>)
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	8013      	strh	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	60020000 	.word	0x60020000

0800083c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000840:	20cf      	movs	r0, #207	; 0xcf
 8000842:	f7ff ffdd 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff ffe8 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800084c:	2081      	movs	r0, #129	; 0x81
 800084e:	f7ff ffe5 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000852:	2030      	movs	r0, #48	; 0x30
 8000854:	f7ff ffe2 	bl	800081c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000858:	20ed      	movs	r0, #237	; 0xed
 800085a:	f7ff ffd1 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f7ff ffdc 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000864:	2003      	movs	r0, #3
 8000866:	f7ff ffd9 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800086a:	2012      	movs	r0, #18
 800086c:	f7ff ffd6 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000870:	2081      	movs	r0, #129	; 0x81
 8000872:	f7ff ffd3 	bl	800081c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000876:	20e8      	movs	r0, #232	; 0xe8
 8000878:	f7ff ffc2 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800087c:	2085      	movs	r0, #133	; 0x85
 800087e:	f7ff ffcd 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000882:	2010      	movs	r0, #16
 8000884:	f7ff ffca 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000888:	2078      	movs	r0, #120	; 0x78
 800088a:	f7ff ffc7 	bl	800081c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800088e:	20cb      	movs	r0, #203	; 0xcb
 8000890:	f7ff ffb6 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000894:	2039      	movs	r0, #57	; 0x39
 8000896:	f7ff ffc1 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800089a:	202c      	movs	r0, #44	; 0x2c
 800089c:	f7ff ffbe 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ffbb 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80008a6:	2034      	movs	r0, #52	; 0x34
 80008a8:	f7ff ffb8 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80008ac:	2002      	movs	r0, #2
 80008ae:	f7ff ffb5 	bl	800081c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80008b2:	20f7      	movs	r0, #247	; 0xf7
 80008b4:	f7ff ffa4 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff ffaf 	bl	800081c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80008be:	20ea      	movs	r0, #234	; 0xea
 80008c0:	f7ff ff9e 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ffa9 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ffa6 	bl	800081c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80008d0:	20b1      	movs	r0, #177	; 0xb1
 80008d2:	f7ff ff95 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff ffa0 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80008dc:	201b      	movs	r0, #27
 80008de:	f7ff ff9d 	bl	800081c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80008e2:	20b6      	movs	r0, #182	; 0xb6
 80008e4:	f7ff ff8c 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80008e8:	200a      	movs	r0, #10
 80008ea:	f7ff ff97 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80008ee:	20a2      	movs	r0, #162	; 0xa2
 80008f0:	f7ff ff94 	bl	800081c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80008f4:	20c0      	movs	r0, #192	; 0xc0
 80008f6:	f7ff ff83 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80008fa:	2035      	movs	r0, #53	; 0x35
 80008fc:	f7ff ff8e 	bl	800081c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000900:	20c1      	movs	r0, #193	; 0xc1
 8000902:	f7ff ff7d 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000906:	2011      	movs	r0, #17
 8000908:	f7ff ff88 	bl	800081c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800090c:	20c5      	movs	r0, #197	; 0xc5
 800090e:	f7ff ff77 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000912:	2045      	movs	r0, #69	; 0x45
 8000914:	f7ff ff82 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000918:	2045      	movs	r0, #69	; 0x45
 800091a:	f7ff ff7f 	bl	800081c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800091e:	20c7      	movs	r0, #199	; 0xc7
 8000920:	f7ff ff6e 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000924:	20a2      	movs	r0, #162	; 0xa2
 8000926:	f7ff ff79 	bl	800081c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800092a:	20f2      	movs	r0, #242	; 0xf2
 800092c:	f7ff ff68 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff73 	bl	800081c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f7ff ff62 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff ff6d 	bl	800081c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000942:	20e0      	movs	r0, #224	; 0xe0
 8000944:	f7ff ff5c 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000948:	200f      	movs	r0, #15
 800094a:	f7ff ff67 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800094e:	2026      	movs	r0, #38	; 0x26
 8000950:	f7ff ff64 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000954:	2024      	movs	r0, #36	; 0x24
 8000956:	f7ff ff61 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800095a:	200b      	movs	r0, #11
 800095c:	f7ff ff5e 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000960:	200e      	movs	r0, #14
 8000962:	f7ff ff5b 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000966:	2009      	movs	r0, #9
 8000968:	f7ff ff58 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800096c:	2054      	movs	r0, #84	; 0x54
 800096e:	f7ff ff55 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000972:	20a8      	movs	r0, #168	; 0xa8
 8000974:	f7ff ff52 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000978:	2046      	movs	r0, #70	; 0x46
 800097a:	f7ff ff4f 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800097e:	200c      	movs	r0, #12
 8000980:	f7ff ff4c 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000984:	2017      	movs	r0, #23
 8000986:	f7ff ff49 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800098a:	2009      	movs	r0, #9
 800098c:	f7ff ff46 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000990:	200f      	movs	r0, #15
 8000992:	f7ff ff43 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000996:	2007      	movs	r0, #7
 8000998:	f7ff ff40 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff3d 	bl	800081c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80009a2:	20e1      	movs	r0, #225	; 0xe1
 80009a4:	f7ff ff2c 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff ff37 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80009ae:	2019      	movs	r0, #25
 80009b0:	f7ff ff34 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80009b4:	201b      	movs	r0, #27
 80009b6:	f7ff ff31 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80009ba:	2004      	movs	r0, #4
 80009bc:	f7ff ff2e 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80009c0:	2010      	movs	r0, #16
 80009c2:	f7ff ff2b 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80009c6:	2007      	movs	r0, #7
 80009c8:	f7ff ff28 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80009cc:	202a      	movs	r0, #42	; 0x2a
 80009ce:	f7ff ff25 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80009d2:	2047      	movs	r0, #71	; 0x47
 80009d4:	f7ff ff22 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80009d8:	2039      	movs	r0, #57	; 0x39
 80009da:	f7ff ff1f 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80009de:	2003      	movs	r0, #3
 80009e0:	f7ff ff1c 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80009e4:	2006      	movs	r0, #6
 80009e6:	f7ff ff19 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80009ea:	2006      	movs	r0, #6
 80009ec:	f7ff ff16 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80009f0:	2030      	movs	r0, #48	; 0x30
 80009f2:	f7ff ff13 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80009f6:	2038      	movs	r0, #56	; 0x38
 80009f8:	f7ff ff10 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80009fc:	200f      	movs	r0, #15
 80009fe:	f7ff ff0d 	bl	800081c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000a02:	2036      	movs	r0, #54	; 0x36
 8000a04:	f7ff fefc 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000a08:	20c8      	movs	r0, #200	; 0xc8
 8000a0a:	f7ff ff07 	bl	800081c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000a0e:	202a      	movs	r0, #42	; 0x2a
 8000a10:	f7ff fef6 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff01 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fefe 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fefb 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000a26:	20ef      	movs	r0, #239	; 0xef
 8000a28:	f7ff fef8 	bl	800081c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000a2c:	202b      	movs	r0, #43	; 0x2b
 8000a2e:	f7ff fee7 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fef2 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff feef 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff feec 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000a44:	203f      	movs	r0, #63	; 0x3f
 8000a46:	f7ff fee9 	bl	800081c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000a4a:	203a      	movs	r0, #58	; 0x3a
 8000a4c:	f7ff fed8 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000a50:	2055      	movs	r0, #85	; 0x55
 8000a52:	f7ff fee3 	bl	800081c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000a56:	2011      	movs	r0, #17
 8000a58:	f7ff fed2 	bl	8000800 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <LCD_REG_Config+0x230>)
 8000a5e:	f7ff fe73 	bl	8000748 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000a62:	2029      	movs	r0, #41	; 0x29
 8000a64:	f7ff fecc 	bl	8000800 <LCD_Write_Cmd>
	
	
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	0002bffc 	.word	0x0002bffc

08000a70 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	80fb      	strh	r3, [r7, #6]
 8000a82:	4603      	mov	r3, r0
 8000a84:	80bb      	strh	r3, [r7, #4]
 8000a86:	460b      	mov	r3, r1
 8000a88:	807b      	strh	r3, [r7, #2]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000a8e:	202a      	movs	r0, #42	; 0x2a
 8000a90:	f7ff feb6 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff febe 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff feb8 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	121b      	asrs	r3, r3, #8
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff feaf 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000abe:	88fa      	ldrh	r2, [r7, #6]
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fea4 	bl	800081c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000ad4:	202b      	movs	r0, #43	; 0x2b
 8000ad6:	f7ff fe93 	bl	8000800 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe9b 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe95 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	883b      	ldrh	r3, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	3b01      	subs	r3, #1
 8000afa:	121b      	asrs	r3, r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe8c 	bl	800081c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000b04:	88ba      	ldrh	r2, [r7, #4]
 8000b06:	883b      	ldrh	r3, [r7, #0]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe81 	bl	800081c <LCD_Write_Data>
	
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}

08000b22 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000b32:	202c      	movs	r0, #44	; 0x2c
 8000b34:	f7ff fe64 	bl	8000800 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e006      	b.n	8000b4c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe6b 	bl	800081c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3f4      	bcc.n	8000b3e <LCD_FillColor+0x1c>
		
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000b5e:	b590      	push	{r4, r7, lr}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4604      	mov	r4, r0
 8000b66:	4608      	mov	r0, r1
 8000b68:	4611      	mov	r1, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	80fb      	strh	r3, [r7, #6]
 8000b70:	4603      	mov	r3, r0
 8000b72:	80bb      	strh	r3, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000b7c:	883b      	ldrh	r3, [r7, #0]
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	88b9      	ldrh	r1, [r7, #4]
 8000b82:	88f8      	ldrh	r0, [r7, #6]
 8000b84:	f7ff ff74 	bl	8000a70 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	883a      	ldrh	r2, [r7, #0]
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	8b3b      	ldrh	r3, [r7, #24]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4610      	mov	r0, r2
 8000b98:	f7ff ffc3 	bl	8000b22 <LCD_FillColor>
	
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}

08000ba4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	80bb      	strh	r3, [r7, #4]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000bb6:	78fb      	ldrb	r3, [r7, #3]
 8000bb8:	3b20      	subs	r3, #32
 8000bba:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000bbc:	88b9      	ldrh	r1, [r7, #4]
 8000bbe:	88f8      	ldrh	r0, [r7, #6]
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	f7ff ff54 	bl	8000a70 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000bc8:	202c      	movs	r0, #44	; 0x2c
 8000bca:	f7ff fe19 	bl	8000800 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73bb      	strb	r3, [r7, #14]
 8000bd2:	e024      	b.n	8000c1e <LCD_DrawChar+0x7a>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000bd4:	7b3a      	ldrb	r2, [r7, #12]
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4915      	ldr	r1, [pc, #84]	; (8000c30 <LCD_DrawChar+0x8c>)
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	440a      	add	r2, r1
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000be4:	2300      	movs	r3, #0
 8000be6:	737b      	strb	r3, [r7, #13]
 8000be8:	e013      	b.n	8000c12 <LCD_DrawChar+0x6e>
		{
			if ( ucTemp & 0x01 )
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <LCD_DrawChar+0x5a>
				LCD_Write_Data ( 0xF81F );
 8000bf4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000bf8:	f7ff fe10 	bl	800081c <LCD_Write_Data>
 8000bfc:	e003      	b.n	8000c06 <LCD_DrawChar+0x62>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000bfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c02:	f7ff fe0b 	bl	800081c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	737b      	strb	r3, [r7, #13]
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d9e8      	bls.n	8000bea <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	73bb      	strb	r3, [r7, #14]
 8000c1e:	7bbb      	ldrb	r3, [r7, #14]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d9d7      	bls.n	8000bd4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	0800537c 	.word	0x0800537c

08000c34 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	603a      	str	r2, [r7, #0]
 8000c3e:	80fb      	strh	r3, [r7, #6]
 8000c40:	460b      	mov	r3, r1
 8000c42:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000c44:	e01c      	b.n	8000c80 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	2be8      	cmp	r3, #232	; 0xe8
 8000c4a:	d904      	bls.n	8000c56 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	3310      	adds	r3, #16
 8000c54:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000c5c:	d903      	bls.n	8000c66 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	88b9      	ldrh	r1, [r7, #4]
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff98 	bl	8000ba4 <LCD_DrawChar>
		
		pStr ++;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1de      	bne.n	8000c46 <LCD_DrawString+0x12>
		
	}
	
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 fd9d 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f8af 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f000 fa23 	bl	80010ec <MX_GPIO_Init>
  MX_FSMC_Init();
 8000ca6:	f000 fad3 	bl	8001250 <MX_FSMC_Init>
  MX_DMA_Init();
 8000caa:	f000 fa01 	bl	80010b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cae:	f000 f9d5 	bl	800105c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cb2:	f000 f90f 	bl	8000ed4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000cb6:	f000 f99b 	bl	8000ff0 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000cba:	f000 f95b 	bl	8000f74 <MX_ADC2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000cbe:	f000 f8fc 	bl	8000eba <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000cc2:	f7ff fd52 	bl	800076a <LCD_INIT>

  NRF24_Init();
 8000cc6:	f7ff fc29 	bl	800051c <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);
 8000cca:	210a      	movs	r1, #10
 8000ccc:	4842      	ldr	r0, [pc, #264]	; (8000dd8 <main+0x144>)
 8000cce:	f7ff fc4c 	bl	800056a <NRF24_RxMode>
  NRF24_ReadAll(data);
 8000cd2:	4842      	ldr	r0, [pc, #264]	; (8000ddc <main+0x148>)
 8000cd4:	f7ff fcd2 	bl	800067c <NRF24_ReadAll>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4840      	ldr	r0, [pc, #256]	; (8000de0 <main+0x14c>)
 8000cde:	f002 f83f 	bl	8002d60 <HAL_GPIO_WritePin>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ce2:	4840      	ldr	r0, [pc, #256]	; (8000de4 <main+0x150>)
 8000ce4:	f001 fa3c 	bl	8002160 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8000ce8:	483f      	ldr	r0, [pc, #252]	; (8000de8 <main+0x154>)
 8000cea:	f001 fa39 	bl	8002160 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //uint32_t VR[2] = {};
	  LCD_Clear(0,0,100,20,WHITE);
 8000cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2314      	movs	r3, #20
 8000cf6:	2264      	movs	r2, #100	; 0x64
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ff2f 	bl	8000b5e <LCD_Clear>
	  if (isDataAvailable(2) == 1)
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fc71 	bl	80005e8 <isDataAvailable>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d116      	bne.n	8000d3a <main+0xa6>
	  {
		  LCD_Clear(0,0,100,20,WHITE);
 8000d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2314      	movs	r3, #20
 8000d14:	2264      	movs	r2, #100	; 0x64
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff ff20 	bl	8000b5e <LCD_Clear>
		  NRF24_Receive(RxData);
 8000d1e:	4833      	ldr	r0, [pc, #204]	; (8000dec <main+0x158>)
 8000d20:	f7ff fc82 	bl	8000628 <NRF24_Receive>
		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 8000d24:	4831      	ldr	r0, [pc, #196]	; (8000dec <main+0x158>)
 8000d26:	f7ff fa7d 	bl	8000224 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	492e      	ldr	r1, [pc, #184]	; (8000dec <main+0x158>)
 8000d34:	482e      	ldr	r0, [pc, #184]	; (8000df0 <main+0x15c>)
 8000d36:	f003 fc07 	bl	8004548 <HAL_UART_Transmit>
	  }
	  LCD_DrawString(0,0,RxData);
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <main+0x158>)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ff78 	bl	8000c34 <LCD_DrawString>

	  HAL_ADC_Start(&hadc1);
 8000d44:	4827      	ldr	r0, [pc, #156]	; (8000de4 <main+0x150>)
 8000d46:	f000 feb7 	bl	8001ab8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 500);
 8000d4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d4e:	4825      	ldr	r0, [pc, #148]	; (8000de4 <main+0x150>)
 8000d50:	f000 ff60 	bl	8001c14 <HAL_ADC_PollForConversion>
	  uint32_t valx = HAL_ADC_GetValue(&hadc1);
 8000d54:	4823      	ldr	r0, [pc, #140]	; (8000de4 <main+0x150>)
 8000d56:	f001 f863 	bl	8001e20 <HAL_ADC_GetValue>
 8000d5a:	61f8      	str	r0, [r7, #28]

	  HAL_ADC_Start(&hadc2);
 8000d5c:	4822      	ldr	r0, [pc, #136]	; (8000de8 <main+0x154>)
 8000d5e:	f000 feab 	bl	8001ab8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 500);
 8000d62:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d66:	4820      	ldr	r0, [pc, #128]	; (8000de8 <main+0x154>)
 8000d68:	f000 ff54 	bl	8001c14 <HAL_ADC_PollForConversion>
	  uint32_t valy = HAL_ADC_GetValue(&hadc2);
 8000d6c:	481e      	ldr	r0, [pc, #120]	; (8000de8 <main+0x154>)
 8000d6e:	f001 f857 	bl	8001e20 <HAL_ADC_GetValue>
 8000d72:	61b8      	str	r0, [r7, #24]

	 // HAL_ADC_Start_DMA(&hadc1, VR,2);

	  char xval[10], yval[10];
	  sprintf(xval, "%u\n", valx);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	491e      	ldr	r1, [pc, #120]	; (8000df4 <main+0x160>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fe55 	bl	8004a2c <siprintf>
	  sprintf(yval, "%u\n", valy);
 8000d82:	463b      	mov	r3, r7
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	491b      	ldr	r1, [pc, #108]	; (8000df4 <main+0x160>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fe4f 	bl	8004a2c <siprintf>

	  LCD_Clear(0,20,200,40,WHITE);
 8000d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2328      	movs	r3, #40	; 0x28
 8000d96:	22c8      	movs	r2, #200	; 0xc8
 8000d98:	2114      	movs	r1, #20
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fedf 	bl	8000b5e <LCD_Clear>
	  LCD_DrawString(10,20,"X = ");
 8000da0:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <main+0x164>)
 8000da2:	2114      	movs	r1, #20
 8000da4:	200a      	movs	r0, #10
 8000da6:	f7ff ff45 	bl	8000c34 <LCD_DrawString>
	  LCD_DrawString(10,40,"Y = ");
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <main+0x168>)
 8000dac:	2128      	movs	r1, #40	; 0x28
 8000dae:	200a      	movs	r0, #10
 8000db0:	f7ff ff40 	bl	8000c34 <LCD_DrawString>
	  LCD_DrawString(40,20,xval);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	461a      	mov	r2, r3
 8000dba:	2114      	movs	r1, #20
 8000dbc:	2028      	movs	r0, #40	; 0x28
 8000dbe:	f7ff ff39 	bl	8000c34 <LCD_DrawString>
	  LCD_DrawString(40,40,yval);
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2128      	movs	r1, #40	; 0x28
 8000dc8:	2028      	movs	r0, #40	; 0x28
 8000dca:	f7ff ff33 	bl	8000c34 <LCD_DrawString>
	  HAL_Delay(500);
 8000dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd2:	f000 fd63 	bl	800189c <HAL_Delay>
  {
 8000dd6:	e78a      	b.n	8000cee <main+0x5a>
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	2000023c 	.word	0x2000023c
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	20000094 	.word	0x20000094
 8000de8:	200000c4 	.word	0x200000c4
 8000dec:	2000021c 	.word	0x2000021c
 8000df0:	20000190 	.word	0x20000190
 8000df4:	08005348 	.word	0x08005348
 8000df8:	0800534c 	.word	0x0800534c
 8000dfc:	08005354 	.word	0x08005354

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b096      	sub	sp, #88	; 0x58
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e0a:	2228      	movs	r2, #40	; 0x28
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fe04 	bl	8004a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e42:	2301      	movs	r3, #1
 8000e44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 ffba 	bl	8002dd4 <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e66:	f000 fa57 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2102      	movs	r1, #2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 fa26 	bl	80032d8 <HAL_RCC_ClockConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e92:	f000 fa41 	bl	8001318 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e96:	2302      	movs	r3, #2
 8000e98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e9e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fbb0 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000eae:	f000 fa33 	bl	8001318 <Error_Handler>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3758      	adds	r7, #88	; 0x58
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2028      	movs	r0, #40	; 0x28
 8000ec4:	f001 facf 	bl	8002466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ec8:	2028      	movs	r0, #40	; 0x28
 8000eca:	f001 fae8 	bl	800249e <HAL_NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000ee6:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f00:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f12:	4816      	ldr	r0, [pc, #88]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f14:	f000 fce6 	bl	80018e4 <HAL_ADC_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f1e:	f000 f9fb 	bl	8001318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f22:	2308      	movs	r3, #8
 8000f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f34:	f000 ff80 	bl	8001e38 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 f9eb 	bl	8001318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f42:	230e      	movs	r3, #14
 8000f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f54:	f000 ff70 	bl	8001e38 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f5e:	f000 f9db 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000094 	.word	0x20000094
 8000f70:	40012400 	.word	0x40012400

08000f74 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <MX_ADC2_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000f9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fa2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000fb2:	f000 fc97 	bl	80018e4 <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 f9ac 	bl	8001318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC2_Init+0x74>)
 8000fd2:	f000 ff31 	bl	8001e38 <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000fdc:	f000 f99c 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200000c4 	.word	0x200000c4
 8000fec:	40012800 	.word	0x40012800

08000ff0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_SPI1_Init+0x64>)
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <MX_SPI1_Init+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_SPI1_Init+0x64>)
 8000ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001000:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_SPI1_Init+0x64>)
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPI1_Init+0x64>)
 8001024:	2218      	movs	r2, #24
 8001026:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPI1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_SPI1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPI1_Init+0x64>)
 800103c:	220a      	movs	r2, #10
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_SPI1_Init+0x64>)
 8001042:	f002 fc7b 	bl	800393c <HAL_SPI_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800104c:	f000 f964 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000138 	.word	0x20000138
 8001058:	40013000 	.word	0x40013000

0800105c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <MX_USART2_UART_Init+0x50>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001094:	f003 fa0b 	bl	80044ae <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109e:	f000 f93b 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000190 	.word	0x20000190
 80010ac:	40004400 	.word	0x40004400

080010b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_DMA_Init+0x38>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <MX_DMA_Init+0x38>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_DMA_Init+0x38>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200b      	movs	r0, #11
 80010d4:	f001 f9c7 	bl	8002466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010d8:	200b      	movs	r0, #11
 80010da:	f001 f9e0 	bl	800249e <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001100:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <MX_GPIO_Init+0x14c>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b47      	ldr	r3, [pc, #284]	; (8001238 <MX_GPIO_Init+0x14c>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a46      	ldr	r2, [pc, #280]	; (8001238 <MX_GPIO_Init+0x14c>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b44      	ldr	r3, [pc, #272]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b41      	ldr	r3, [pc, #260]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a40      	ldr	r2, [pc, #256]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <MX_GPIO_Init+0x14c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001148:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <MX_GPIO_Init+0x14c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <MX_GPIO_Init+0x14c>)
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b38      	ldr	r3, [pc, #224]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a34      	ldr	r2, [pc, #208]	; (8001238 <MX_GPIO_Init+0x14c>)
 8001166:	f043 0320 	orr.w	r3, r3, #32
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <MX_GPIO_Init+0x14c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2160      	movs	r1, #96	; 0x60
 800117c:	482f      	ldr	r0, [pc, #188]	; (800123c <MX_GPIO_Init+0x150>)
 800117e:	f001 fdef 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001188:	482d      	ldr	r0, [pc, #180]	; (8001240 <MX_GPIO_Init+0x154>)
 800118a:	f001 fde9 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	482c      	ldr	r0, [pc, #176]	; (8001244 <MX_GPIO_Init+0x158>)
 8001194:	f001 fde4 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2102      	movs	r1, #2
 800119c:	482a      	ldr	r0, [pc, #168]	; (8001248 <MX_GPIO_Init+0x15c>)
 800119e:	f001 fddf 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_GPIO_Init+0x160>)
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4821      	ldr	r0, [pc, #132]	; (800123c <MX_GPIO_Init+0x150>)
 80011b8:	f001 fc3e 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2302      	movs	r3, #2
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4619      	mov	r1, r3
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <MX_GPIO_Init+0x150>)
 80011d4:	f001 fc30 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <MX_GPIO_Init+0x154>)
 80011f2:	f001 fc21 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011f6:	2320      	movs	r3, #32
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2302      	movs	r3, #2
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	4619      	mov	r1, r3
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_GPIO_Init+0x158>)
 800120e:	f001 fc13 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <MX_GPIO_Init+0x15c>)
 800122a:	f001 fc05 	bl	8002a38 <HAL_GPIO_Init>

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40011000 	.word	0x40011000
 8001240:	40011400 	.word	0x40011400
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40011800 	.word	0x40011800
 800124c:	10110000 	.word	0x10110000

08001250 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_FSMC_Init+0xbc>)
 800126a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800126e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_FSMC_Init+0xbc>)
 8001272:	4a27      	ldr	r2, [pc, #156]	; (8001310 <MX_FSMC_Init+0xc0>)
 8001274:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_FSMC_Init+0xbc>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_FSMC_Init+0xbc>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_FSMC_Init+0xbc>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_FSMC_Init+0xbc>)
 800128a:	2210      	movs	r2, #16
 800128c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_FSMC_Init+0xbc>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_FSMC_Init+0xbc>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_FSMC_Init+0xbc>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_FSMC_Init+0xbc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_FSMC_Init+0xbc>)
 80012a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_FSMC_Init+0xbc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_FSMC_Init+0xbc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_FSMC_Init+0xbc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_FSMC_Init+0xbc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80012c6:	230f      	movs	r3, #15
 80012c8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012ca:	230f      	movs	r3, #15
 80012cc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012ce:	23ff      	movs	r3, #255	; 0xff
 80012d0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012d2:	230f      	movs	r3, #15
 80012d4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012d6:	2310      	movs	r3, #16
 80012d8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012da:	2311      	movs	r3, #17
 80012dc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <MX_FSMC_Init+0xbc>)
 80012ea:	f003 f893 	bl	8004414 <HAL_SRAM_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80012f4:	f000 f810 	bl	8001318 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_FSMC_Init+0xc4>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <MX_FSMC_Init+0xc4>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001d4 	.word	0x200001d4
 8001310:	a0000104 	.word	0xa0000104
 8001314:	40010000 	.word	0x40010000

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_MspInit+0x5c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_MspInit+0x5c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_MspInit+0x5c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_MspInit+0x60>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_MspInit+0x60>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000

08001388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a47      	ldr	r2, [pc, #284]	; (80014c0 <HAL_ADC_MspInit+0x138>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d160      	bne.n	800146a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a8:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c0:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a3f      	ldr	r2, [pc, #252]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a39      	ldr	r2, [pc, #228]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013f0:	2310      	movs	r3, #16
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4619      	mov	r1, r3
 80013fe:	4832      	ldr	r0, [pc, #200]	; (80014c8 <HAL_ADC_MspInit+0x140>)
 8001400:	f001 fb1a 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001408:	2303      	movs	r3, #3
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4619      	mov	r1, r3
 8001412:	482e      	ldr	r0, [pc, #184]	; (80014cc <HAL_ADC_MspInit+0x144>)
 8001414:	f001 fb10 	bl	8002a38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 800141a:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <HAL_ADC_MspInit+0x14c>)
 800141c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 8001432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001436:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 800143a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800144c:	4820      	ldr	r0, [pc, #128]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 800144e:	f001 f841 	bl	80024d4 <HAL_DMA_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001458:	f7ff ff5e 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 8001460:	621a      	str	r2, [r3, #32]
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_ADC_MspInit+0x148>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001468:	e026      	b.n	80014b8 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_ADC_MspInit+0x150>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d121      	bne.n	80014b8 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_ADC_MspInit+0x13c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a4:	2301      	movs	r3, #1
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a8:	2303      	movs	r3, #3
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <HAL_ADC_MspInit+0x144>)
 80014b4:	f001 fac0 	bl	8002a38 <HAL_GPIO_Init>
}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	; 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40012400 	.word	0x40012400
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	200000f4 	.word	0x200000f4
 80014d4:	40020008 	.word	0x40020008
 80014d8:	40012800 	.word	0x40012800

080014dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_SPI_MspInit+0x88>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d12f      	bne.n	800155c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_SPI_MspInit+0x8c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a19      	ldr	r2, [pc, #100]	; (8001568 <HAL_SPI_MspInit+0x8c>)
 8001502:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_SPI_MspInit+0x8c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_SPI_MspInit+0x8c>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_SPI_MspInit+0x8c>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_SPI_MspInit+0x8c>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800152c:	23a0      	movs	r3, #160	; 0xa0
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <HAL_SPI_MspInit+0x90>)
 8001540:	f001 fa7a 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001544:	2340      	movs	r3, #64	; 0x40
 8001546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_SPI_MspInit+0x90>)
 8001558:	f001 fa6e 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013000 	.word	0x40013000
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <HAL_UART_MspInit+0x88>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d12f      	bne.n	80015f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_UART_MspInit+0x8c>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_UART_MspInit+0x8c>)
 8001596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159a:	61d3      	str	r3, [r2, #28]
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_UART_MspInit+0x8c>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_UART_MspInit+0x8c>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_UART_MspInit+0x8c>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_UART_MspInit+0x8c>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c0:	2304      	movs	r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	480b      	ldr	r0, [pc, #44]	; (8001600 <HAL_UART_MspInit+0x90>)
 80015d4:	f001 fa30 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d8:	2308      	movs	r3, #8
 80015da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_UART_MspInit+0x90>)
 80015ec:	f001 fa24 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40004400 	.word	0x40004400
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010800 	.word	0x40010800

08001604 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_FSMC_MspInit+0x78>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d129      	bne.n	8001674 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_FSMC_MspInit+0x78>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_FSMC_MspInit+0x7c>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <HAL_FSMC_MspInit+0x7c>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_FSMC_MspInit+0x7c>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800163e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001642:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4619      	mov	r1, r3
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <HAL_FSMC_MspInit+0x80>)
 8001654:	f001 f9f0 	bl	8002a38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001658:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800165c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <HAL_FSMC_MspInit+0x84>)
 800166e:	f001 f9e3 	bl	8002a38 <HAL_GPIO_Init>
 8001672:	e000      	b.n	8001676 <HAL_FSMC_MspInit+0x72>
    return;
 8001674:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000270 	.word	0x20000270
 8001680:	40021000 	.word	0x40021000
 8001684:	40011800 	.word	0x40011800
 8001688:	40011400 	.word	0x40011400

0800168c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001694:	f7ff ffb6 	bl	8001604 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f000 f8bd 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <DMA1_Channel1_IRQHandler+0x10>)
 80016f6:	f000 ff63 	bl	80025c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200000f4 	.word	0x200000f4

08001704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800170c:	f001 fb40 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f003 f940 	bl	80049c8 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20010000 	.word	0x20010000
 8001774:	00000400 	.word	0x00000400
 8001778:	20000274 	.word	0x20000274
 800177c:	20000290 	.word	0x20000290

08001780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b2:	f7ff ffe5 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f003 f90d 	bl	80049d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff fa6b 	bl	8000c94 <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017c8:	080059c0 	.word	0x080059c0
  ldr r2, =_sbss
 80017cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017d0:	2000028c 	.word	0x2000028c

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 fe31 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fd96 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fe49 	bl	80024ba <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001840:	f000 fe11 	bl	8002466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000008 	.word	0x20000008
 800185c:	20000010 	.word	0x20000010
 8001860:	2000000c 	.word	0x2000000c

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000010 	.word	0x20000010
 8001884:	20000278 	.word	0x20000278

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000278 	.word	0x20000278

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fff0 	bl	8001888 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffe0 	bl	8001888 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000010 	.word	0x20000010

080018e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0ce      	b.n	8001aa4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fd30 	bl	8001388 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fbd7 	bl	80020dc <ADC_ConversionStop_Disable>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 80a9 	bne.w	8001a92 <HAL_ADC_Init+0x1ae>
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80a5 	bne.w	8001a92 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001950:	f023 0302 	bic.w	r3, r3, #2
 8001954:	f043 0202 	orr.w	r2, r3, #2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4951      	ldr	r1, [pc, #324]	; (8001aac <HAL_ADC_Init+0x1c8>)
 8001966:	428b      	cmp	r3, r1
 8001968:	d10a      	bne.n	8001980 <HAL_ADC_Init+0x9c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001972:	d002      	beq.n	800197a <HAL_ADC_Init+0x96>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	e004      	b.n	8001984 <HAL_ADC_Init+0xa0>
 800197a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800197e:	e001      	b.n	8001984 <HAL_ADC_Init+0xa0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001984:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7b1b      	ldrb	r3, [r3, #12]
 800198a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800198c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	4313      	orrs	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800199c:	d003      	beq.n	80019a6 <HAL_ADC_Init+0xc2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <HAL_ADC_Init+0xc8>
 80019a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019aa:	e000      	b.n	80019ae <HAL_ADC_Init+0xca>
 80019ac:	2300      	movs	r3, #0
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7d1b      	ldrb	r3, [r3, #20]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d119      	bne.n	80019f0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7b1b      	ldrb	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	035a      	lsls	r2, r3, #13
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e00b      	b.n	80019f0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	f043 0220 	orr.w	r2, r3, #32
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_ADC_Init+0x1cc>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a20:	d003      	beq.n	8001a2a <HAL_ADC_Init+0x146>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d104      	bne.n	8001a34 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	051b      	lsls	r3, r3, #20
 8001a32:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_ADC_Init+0x1d0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d10b      	bne.n	8001a70 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a6e:	e018      	b.n	8001aa2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f023 0312 	bic.w	r3, r3, #18
 8001a78:	f043 0210 	orr.w	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a90:	e007      	b.n	8001aa2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	f043 0210 	orr.w	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40013c00 	.word	0x40013c00
 8001ab0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ab4:	ff1f0efe 	.word	0xff1f0efe

08001ab8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Start+0x1a>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e098      	b.n	8001c04 <HAL_ADC_Start+0x14c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 faa4 	bl	8002028 <ADC_Enable>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 8087 	bne.w	8001bfa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a41      	ldr	r2, [pc, #260]	; (8001c0c <HAL_ADC_Start+0x154>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d105      	bne.n	8001b16 <HAL_ADC_Start+0x5e>
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_ADC_Start+0x158>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d026      	beq.n	8001b7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b40:	e01d      	b.n	8001b7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_ADC_Start+0x158>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d004      	beq.n	8001b62 <HAL_ADC_Start+0xaa>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2b      	ldr	r2, [pc, #172]	; (8001c0c <HAL_ADC_Start+0x154>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10d      	bne.n	8001b7e <HAL_ADC_Start+0xc6>
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_ADC_Start+0x158>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f023 0206 	bic.w	r2, r3, #6
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b96:	e002      	b.n	8001b9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f06f 0202 	mvn.w	r2, #2
 8001bae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bbe:	d113      	bne.n	8001be8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_ADC_Start+0x154>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d105      	bne.n	8001bd6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_ADC_Start+0x158>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	e00c      	b.n	8001c02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	e003      	b.n	8001c02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40012800 	.word	0x40012800
 8001c10:	40012400 	.word	0x40012400

08001c14 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c2a:	f7ff fe2d 	bl	8001888 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f043 0220 	orr.w	r2, r3, #32
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0d3      	b.n	8001dfe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d131      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d12a      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c72:	e021      	b.n	8001cb8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c7a:	d01d      	beq.n	8001cb8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_ADC_PollForConversion+0x7e>
 8001c82:	f7ff fe01 	bl	8001888 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d212      	bcs.n	8001cb8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0a2      	b.n	8001dfe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0d6      	beq.n	8001c74 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cc6:	e070      	b.n	8001daa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <HAL_ADC_PollForConversion+0x1f4>)
 8001cca:	681c      	ldr	r4, [r3, #0]
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f001 fd51 	bl	8003774 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_ADC_PollForConversion+0x1f8>)
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_ADC_PollForConversion+0x104>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68d9      	ldr	r1, [r3, #12]
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <HAL_ADC_PollForConversion+0x1fc>)
 8001cee:	400b      	ands	r3, r1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d111      	bne.n	8001d18 <HAL_ADC_PollForConversion+0x104>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_ADC_PollForConversion+0x200>)
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d108      	bne.n	8001d14 <HAL_ADC_PollForConversion+0x100>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_ADC_PollForConversion+0x204>)
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_PollForConversion+0x100>
 8001d10:	2314      	movs	r3, #20
 8001d12:	e020      	b.n	8001d56 <HAL_ADC_PollForConversion+0x142>
 8001d14:	2329      	movs	r3, #41	; 0x29
 8001d16:	e01e      	b.n	8001d56 <HAL_ADC_PollForConversion+0x142>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6919      	ldr	r1, [r3, #16]
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_ADC_PollForConversion+0x200>)
 8001d20:	400b      	ands	r3, r1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_ADC_PollForConversion+0x120>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_ADC_PollForConversion+0x204>)
 8001d2e:	400b      	ands	r3, r1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <HAL_ADC_PollForConversion+0x13c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6919      	ldr	r1, [r3, #16]
 8001d3a:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <HAL_ADC_PollForConversion+0x208>)
 8001d3c:	400b      	ands	r3, r1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d108      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x140>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68d9      	ldr	r1, [r3, #12]
 8001d48:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <HAL_ADC_PollForConversion+0x208>)
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x140>
 8001d50:	2354      	movs	r3, #84	; 0x54
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_PollForConversion+0x142>
 8001d54:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d5c:	e021      	b.n	8001da2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d64:	d01a      	beq.n	8001d9c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_ADC_PollForConversion+0x168>
 8001d6c:	f7ff fd8c 	bl	8001888 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d20f      	bcs.n	8001d9c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d90b      	bls.n	8001d9c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e030      	b.n	8001dfe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d8d9      	bhi.n	8001d5e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0212 	mvn.w	r2, #18
 8001db2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dce:	d115      	bne.n	8001dfc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d111      	bne.n	8001dfc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	24924924 	.word	0x24924924
 8001e10:	00924924 	.word	0x00924924
 8001e14:	12492492 	.word	0x12492492
 8001e18:	00492492 	.word	0x00492492
 8001e1c:	00249249 	.word	0x00249249

08001e20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x20>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e0dc      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1da>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d81c      	bhi.n	8001ea2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	3b05      	subs	r3, #5
 8001e7a:	221f      	movs	r2, #31
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4019      	ands	r1, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b05      	subs	r3, #5
 8001e94:	fa00 f203 	lsl.w	r2, r0, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea0:	e03c      	b.n	8001f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d81c      	bhi.n	8001ee4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b23      	subs	r3, #35	; 0x23
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	4019      	ands	r1, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b23      	subs	r3, #35	; 0x23
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee2:	e01b      	b.n	8001f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b41      	subs	r3, #65	; 0x41
 8001ef6:	221f      	movs	r2, #31
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4019      	ands	r1, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b41      	subs	r3, #65	; 0x41
 8001f10:	fa00 f203 	lsl.w	r2, r0, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d91c      	bls.n	8001f5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	3b1e      	subs	r3, #30
 8001f36:	2207      	movs	r2, #7
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4019      	ands	r1, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b1e      	subs	r3, #30
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	e019      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6919      	ldr	r1, [r3, #16]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	2207      	movs	r2, #7
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4019      	ands	r1, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6898      	ldr	r0, [r3, #8]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d003      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f9e:	2b11      	cmp	r3, #17
 8001fa0:	d132      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1d      	ldr	r2, [pc, #116]	; (800201c <HAL_ADC_ConfigChannel+0x1e4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d125      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d126      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fc8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d11a      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	0c9a      	lsrs	r2, r3, #18
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe8:	e002      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f9      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x1b2>
 8001ff6:	e007      	b.n	8002008 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40012400 	.word	0x40012400
 8002020:	20000008 	.word	0x20000008
 8002024:	431bde83 	.word	0x431bde83

08002028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d040      	beq.n	80020c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <ADC_Enable+0xac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <ADC_Enable+0xb0>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	0c9b      	lsrs	r3, r3, #18
 8002062:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002064:	e002      	b.n	800206c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3b01      	subs	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002072:	f7ff fc09 	bl	8001888 <HAL_GetTick>
 8002076:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002078:	e01f      	b.n	80020ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800207a:	f7ff fc05 	bl	8001888 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d918      	bls.n	80020ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d011      	beq.n	80020ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f043 0210 	orr.w	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d1d8      	bne.n	800207a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000008 	.word	0x20000008
 80020d8:	431bde83 	.word	0x431bde83

080020dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d12e      	bne.n	8002154 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002106:	f7ff fbbf 	bl	8001888 <HAL_GetTick>
 800210a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800210c:	e01b      	b.n	8002146 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800210e:	f7ff fbbb 	bl	8001888 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d914      	bls.n	8002146 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10d      	bne.n	8002146 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e007      	b.n	8002156 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d0dc      	beq.n	800210e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_ADCEx_Calibration_Start+0x1e>
 800217a:	2302      	movs	r3, #2
 800217c:	e095      	b.n	80022aa <HAL_ADCEx_Calibration_Start+0x14a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffa8 	bl	80020dc <ADC_ConversionStop_Disable>
 800218c:	4603      	mov	r3, r0
 800218e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 8084 	bne.w	80022a0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021a0:	f023 0302 	bic.w	r3, r3, #2
 80021a4:	f043 0202 	orr.w	r2, r3, #2
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021ac:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_ADCEx_Calibration_Start+0x154>)
 80021ae:	681c      	ldr	r4, [r3, #0]
 80021b0:	2002      	movs	r0, #2
 80021b2:	f001 fadf 	bl	8003774 <HAL_RCCEx_GetPeriphCLKFreq>
 80021b6:	4603      	mov	r3, r0
 80021b8:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80021bc:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80021be:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80021c0:	e002      	b.n	80021c8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f9      	bne.n	80021c2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ff2a 	bl	8002028 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0208 	orr.w	r2, r2, #8
 80021e2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021e4:	f7ff fb50 	bl	8001888 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021ea:	e01b      	b.n	8002224 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021ec:	f7ff fb4c 	bl	8001888 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b0a      	cmp	r3, #10
 80021f8:	d914      	bls.n	8002224 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f023 0312 	bic.w	r3, r3, #18
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e042      	b.n	80022aa <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1dc      	bne.n	80021ec <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0204 	orr.w	r2, r2, #4
 8002240:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002242:	f7ff fb21 	bl	8001888 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002248:	e01b      	b.n	8002282 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800224a:	f7ff fb1d 	bl	8001888 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b0a      	cmp	r3, #10
 8002256:	d914      	bls.n	8002282 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f023 0312 	bic.w	r3, r3, #18
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e013      	b.n	80022aa <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1dc      	bne.n	800224a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f023 0303 	bic.w	r3, r3, #3
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000008 	.word	0x20000008

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4906      	ldr	r1, [pc, #24]	; (8002350 <__NVIC_EnableIRQ+0x34>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100

08002354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	db0a      	blt.n	800237e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	490c      	ldr	r1, [pc, #48]	; (80023a0 <__NVIC_SetPriority+0x4c>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	440b      	add	r3, r1
 8002378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800237c:	e00a      	b.n	8002394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <__NVIC_SetPriority+0x50>)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3b04      	subs	r3, #4
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	440b      	add	r3, r1
 8002392:	761a      	strb	r2, [r3, #24]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf28      	it	cs
 80023c6:	2304      	movcs	r3, #4
 80023c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <NVIC_EncodePriority+0x30>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3b03      	subs	r3, #3
 80023d6:	e000      	b.n	80023da <NVIC_EncodePriority+0x32>
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	401a      	ands	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	4313      	orrs	r3, r2
         );
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002430:	f7ff ff90 	bl	8002354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff2d 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff42 	bl	8002300 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff90 	bl	80023a8 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5f 	bl	8002354 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff35 	bl	800231c <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e059      	b.n	800259e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_DMA_Init+0xd4>)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d80f      	bhi.n	8002516 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_DMA_Init+0xd8>)
 80024fe:	4413      	add	r3, r2
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_DMA_Init+0xdc>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	009a      	lsls	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <HAL_DMA_Init+0xe0>)
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
 8002514:	e00e      	b.n	8002534 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_DMA_Init+0xe4>)
 800251e:	4413      	add	r3, r2
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_DMA_Init+0xdc>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	009a      	lsls	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_DMA_Init+0xe8>)
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800254a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800254e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40020407 	.word	0x40020407
 80025ac:	bffdfff8 	.word	0xbffdfff8
 80025b0:	cccccccd 	.word	0xcccccccd
 80025b4:	40020000 	.word	0x40020000
 80025b8:	bffdfbf8 	.word	0xbffdfbf8
 80025bc:	40020400 	.word	0x40020400

080025c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2204      	movs	r2, #4
 80025de:	409a      	lsls	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80f1 	beq.w	80027cc <HAL_DMA_IRQHandler+0x20c>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80eb 	beq.w	80027cc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d107      	bne.n	8002614 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_DMA_IRQHandler+0x1d8>)
 800261c:	429a      	cmp	r2, r3
 800261e:	d958      	bls.n	80026d2 <HAL_DMA_IRQHandler+0x112>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_DMA_IRQHandler+0x1dc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d04f      	beq.n	80026ca <HAL_DMA_IRQHandler+0x10a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5c      	ldr	r2, [pc, #368]	; (80027a0 <HAL_DMA_IRQHandler+0x1e0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d048      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x106>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5a      	ldr	r2, [pc, #360]	; (80027a4 <HAL_DMA_IRQHandler+0x1e4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d040      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x100>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a59      	ldr	r2, [pc, #356]	; (80027a8 <HAL_DMA_IRQHandler+0x1e8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d038      	beq.n	80026ba <HAL_DMA_IRQHandler+0xfa>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a57      	ldr	r2, [pc, #348]	; (80027ac <HAL_DMA_IRQHandler+0x1ec>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d030      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xf4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a56      	ldr	r2, [pc, #344]	; (80027b0 <HAL_DMA_IRQHandler+0x1f0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d028      	beq.n	80026ae <HAL_DMA_IRQHandler+0xee>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_DMA_IRQHandler+0x1d8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d020      	beq.n	80026a8 <HAL_DMA_IRQHandler+0xe8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_DMA_IRQHandler+0x1f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d019      	beq.n	80026a4 <HAL_DMA_IRQHandler+0xe4>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a50      	ldr	r2, [pc, #320]	; (80027b8 <HAL_DMA_IRQHandler+0x1f8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d012      	beq.n	80026a0 <HAL_DMA_IRQHandler+0xe0>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a4f      	ldr	r2, [pc, #316]	; (80027bc <HAL_DMA_IRQHandler+0x1fc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00a      	beq.n	800269a <HAL_DMA_IRQHandler+0xda>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_DMA_IRQHandler+0x200>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d102      	bne.n	8002694 <HAL_DMA_IRQHandler+0xd4>
 800268e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002692:	e01b      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 8002694:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002698:	e018      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 800269a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269e:	e015      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026a0:	2340      	movs	r3, #64	; 0x40
 80026a2:	e013      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026a4:	2304      	movs	r3, #4
 80026a6:	e011      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026ac:	e00e      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026b2:	e00b      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026b8:	e008      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026be:	e005      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c4:	e002      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	e000      	b.n	80026cc <HAL_DMA_IRQHandler+0x10c>
 80026ca:	2304      	movs	r3, #4
 80026cc:	4a3d      	ldr	r2, [pc, #244]	; (80027c4 <HAL_DMA_IRQHandler+0x204>)
 80026ce:	6053      	str	r3, [r2, #4]
 80026d0:	e057      	b.n	8002782 <HAL_DMA_IRQHandler+0x1c2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a31      	ldr	r2, [pc, #196]	; (800279c <HAL_DMA_IRQHandler+0x1dc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d04f      	beq.n	800277c <HAL_DMA_IRQHandler+0x1bc>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2f      	ldr	r2, [pc, #188]	; (80027a0 <HAL_DMA_IRQHandler+0x1e0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d048      	beq.n	8002778 <HAL_DMA_IRQHandler+0x1b8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2e      	ldr	r2, [pc, #184]	; (80027a4 <HAL_DMA_IRQHandler+0x1e4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d040      	beq.n	8002772 <HAL_DMA_IRQHandler+0x1b2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <HAL_DMA_IRQHandler+0x1e8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d038      	beq.n	800276c <HAL_DMA_IRQHandler+0x1ac>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <HAL_DMA_IRQHandler+0x1ec>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d030      	beq.n	8002766 <HAL_DMA_IRQHandler+0x1a6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <HAL_DMA_IRQHandler+0x1f0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d028      	beq.n	8002760 <HAL_DMA_IRQHandler+0x1a0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_DMA_IRQHandler+0x1d8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d020      	beq.n	800275a <HAL_DMA_IRQHandler+0x19a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <HAL_DMA_IRQHandler+0x1f4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_DMA_IRQHandler+0x196>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a24      	ldr	r2, [pc, #144]	; (80027b8 <HAL_DMA_IRQHandler+0x1f8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d012      	beq.n	8002752 <HAL_DMA_IRQHandler+0x192>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a22      	ldr	r2, [pc, #136]	; (80027bc <HAL_DMA_IRQHandler+0x1fc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00a      	beq.n	800274c <HAL_DMA_IRQHandler+0x18c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <HAL_DMA_IRQHandler+0x200>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d102      	bne.n	8002746 <HAL_DMA_IRQHandler+0x186>
 8002740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002744:	e01b      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 8002746:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800274a:	e018      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 800274c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002750:	e015      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 8002752:	2340      	movs	r3, #64	; 0x40
 8002754:	e013      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 8002756:	2304      	movs	r3, #4
 8002758:	e011      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 800275a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800275e:	e00e      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 8002760:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002764:	e00b      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 8002766:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800276a:	e008      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 800276c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002770:	e005      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 8002772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002776:	e002      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x1be>
 800277c:	2304      	movs	r3, #4
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_DMA_IRQHandler+0x208>)
 8002780:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8136 	beq.w	80029f8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002794:	e130      	b.n	80029f8 <HAL_DMA_IRQHandler+0x438>
 8002796:	bf00      	nop
 8002798:	40020080 	.word	0x40020080
 800279c:	40020008 	.word	0x40020008
 80027a0:	4002001c 	.word	0x4002001c
 80027a4:	40020030 	.word	0x40020030
 80027a8:	40020044 	.word	0x40020044
 80027ac:	40020058 	.word	0x40020058
 80027b0:	4002006c 	.word	0x4002006c
 80027b4:	40020408 	.word	0x40020408
 80027b8:	4002041c 	.word	0x4002041c
 80027bc:	40020430 	.word	0x40020430
 80027c0:	40020444 	.word	0x40020444
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2202      	movs	r2, #2
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80dd 	beq.w	8002998 <HAL_DMA_IRQHandler+0x3d8>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80d7 	beq.w	8002998 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 020a 	bic.w	r2, r2, #10
 8002806:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b7b      	ldr	r3, [pc, #492]	; (8002a04 <HAL_DMA_IRQHandler+0x444>)
 8002818:	429a      	cmp	r2, r3
 800281a:	d958      	bls.n	80028ce <HAL_DMA_IRQHandler+0x30e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a79      	ldr	r2, [pc, #484]	; (8002a08 <HAL_DMA_IRQHandler+0x448>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d04f      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x306>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a78      	ldr	r2, [pc, #480]	; (8002a0c <HAL_DMA_IRQHandler+0x44c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d048      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x302>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a76      	ldr	r2, [pc, #472]	; (8002a10 <HAL_DMA_IRQHandler+0x450>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d040      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2fc>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	; (8002a14 <HAL_DMA_IRQHandler+0x454>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d038      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x2f6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a73      	ldr	r2, [pc, #460]	; (8002a18 <HAL_DMA_IRQHandler+0x458>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d030      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x2f0>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a72      	ldr	r2, [pc, #456]	; (8002a1c <HAL_DMA_IRQHandler+0x45c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d028      	beq.n	80028aa <HAL_DMA_IRQHandler+0x2ea>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a69      	ldr	r2, [pc, #420]	; (8002a04 <HAL_DMA_IRQHandler+0x444>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d020      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x2e4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <HAL_DMA_IRQHandler+0x460>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d019      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x2e0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6c      	ldr	r2, [pc, #432]	; (8002a24 <HAL_DMA_IRQHandler+0x464>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d012      	beq.n	800289c <HAL_DMA_IRQHandler+0x2dc>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6b      	ldr	r2, [pc, #428]	; (8002a28 <HAL_DMA_IRQHandler+0x468>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00a      	beq.n	8002896 <HAL_DMA_IRQHandler+0x2d6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_DMA_IRQHandler+0x46c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d102      	bne.n	8002890 <HAL_DMA_IRQHandler+0x2d0>
 800288a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800288e:	e01b      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 8002890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002894:	e018      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 8002896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289a:	e015      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 800289c:	2320      	movs	r3, #32
 800289e:	e013      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e011      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a8:	e00e      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028ae:	e00b      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b4:	e008      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ba:	e005      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c0:	e002      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028c2:	2320      	movs	r3, #32
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_IRQHandler+0x308>
 80028c6:	2302      	movs	r3, #2
 80028c8:	4a59      	ldr	r2, [pc, #356]	; (8002a30 <HAL_DMA_IRQHandler+0x470>)
 80028ca:	6053      	str	r3, [r2, #4]
 80028cc:	e057      	b.n	800297e <HAL_DMA_IRQHandler+0x3be>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_DMA_IRQHandler+0x448>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d04f      	beq.n	8002978 <HAL_DMA_IRQHandler+0x3b8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a4b      	ldr	r2, [pc, #300]	; (8002a0c <HAL_DMA_IRQHandler+0x44c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d048      	beq.n	8002974 <HAL_DMA_IRQHandler+0x3b4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_DMA_IRQHandler+0x450>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d040      	beq.n	800296e <HAL_DMA_IRQHandler+0x3ae>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <HAL_DMA_IRQHandler+0x454>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d038      	beq.n	8002968 <HAL_DMA_IRQHandler+0x3a8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a47      	ldr	r2, [pc, #284]	; (8002a18 <HAL_DMA_IRQHandler+0x458>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d030      	beq.n	8002962 <HAL_DMA_IRQHandler+0x3a2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a45      	ldr	r2, [pc, #276]	; (8002a1c <HAL_DMA_IRQHandler+0x45c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d028      	beq.n	800295c <HAL_DMA_IRQHandler+0x39c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a3d      	ldr	r2, [pc, #244]	; (8002a04 <HAL_DMA_IRQHandler+0x444>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d020      	beq.n	8002956 <HAL_DMA_IRQHandler+0x396>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a41      	ldr	r2, [pc, #260]	; (8002a20 <HAL_DMA_IRQHandler+0x460>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_DMA_IRQHandler+0x392>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a40      	ldr	r2, [pc, #256]	; (8002a24 <HAL_DMA_IRQHandler+0x464>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d012      	beq.n	800294e <HAL_DMA_IRQHandler+0x38e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3e      	ldr	r2, [pc, #248]	; (8002a28 <HAL_DMA_IRQHandler+0x468>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00a      	beq.n	8002948 <HAL_DMA_IRQHandler+0x388>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3d      	ldr	r2, [pc, #244]	; (8002a2c <HAL_DMA_IRQHandler+0x46c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d102      	bne.n	8002942 <HAL_DMA_IRQHandler+0x382>
 800293c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002940:	e01b      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002946:	e018      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294c:	e015      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 800294e:	2320      	movs	r3, #32
 8002950:	e013      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002952:	2302      	movs	r3, #2
 8002954:	e011      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800295a:	e00e      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 800295c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002960:	e00b      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002966:	e008      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296c:	e005      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 800296e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002972:	e002      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002974:	2320      	movs	r3, #32
 8002976:	e000      	b.n	800297a <HAL_DMA_IRQHandler+0x3ba>
 8002978:	2302      	movs	r3, #2
 800297a:	4a2e      	ldr	r2, [pc, #184]	; (8002a34 <HAL_DMA_IRQHandler+0x474>)
 800297c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d034      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002996:	e02f      	b.n	80029f8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2208      	movs	r2, #8
 800299e:	409a      	lsls	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d028      	beq.n	80029fa <HAL_DMA_IRQHandler+0x43a>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d023      	beq.n	80029fa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 020e 	bic.w	r2, r2, #14
 80029c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f202 	lsl.w	r2, r1, r2
 80029d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
    }
  }
  return;
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
}
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40020080 	.word	0x40020080
 8002a08:	40020008 	.word	0x40020008
 8002a0c:	4002001c 	.word	0x4002001c
 8002a10:	40020030 	.word	0x40020030
 8002a14:	40020044 	.word	0x40020044
 8002a18:	40020058 	.word	0x40020058
 8002a1c:	4002006c 	.word	0x4002006c
 8002a20:	40020408 	.word	0x40020408
 8002a24:	4002041c 	.word	0x4002041c
 8002a28:	40020430 	.word	0x40020430
 8002a2c:	40020444 	.word	0x40020444
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020000 	.word	0x40020000

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b08b      	sub	sp, #44	; 0x2c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4a:	e179      	b.n	8002d40 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 8168 	bne.w	8002d3a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4a96      	ldr	r2, [pc, #600]	; (8002cc8 <HAL_GPIO_Init+0x290>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d05e      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a74:	4a94      	ldr	r2, [pc, #592]	; (8002cc8 <HAL_GPIO_Init+0x290>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d875      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a7a:	4a94      	ldr	r2, [pc, #592]	; (8002ccc <HAL_GPIO_Init+0x294>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d058      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a80:	4a92      	ldr	r2, [pc, #584]	; (8002ccc <HAL_GPIO_Init+0x294>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d86f      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a86:	4a92      	ldr	r2, [pc, #584]	; (8002cd0 <HAL_GPIO_Init+0x298>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d052      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a8c:	4a90      	ldr	r2, [pc, #576]	; (8002cd0 <HAL_GPIO_Init+0x298>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d869      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a92:	4a90      	ldr	r2, [pc, #576]	; (8002cd4 <HAL_GPIO_Init+0x29c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04c      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002a98:	4a8e      	ldr	r2, [pc, #568]	; (8002cd4 <HAL_GPIO_Init+0x29c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d863      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002a9e:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <HAL_GPIO_Init+0x2a0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d046      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002aa4:	4a8c      	ldr	r2, [pc, #560]	; (8002cd8 <HAL_GPIO_Init+0x2a0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d85d      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	d82a      	bhi.n	8002b04 <HAL_GPIO_Init+0xcc>
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d859      	bhi.n	8002b66 <HAL_GPIO_Init+0x12e>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_GPIO_Init+0x80>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002b33 	.word	0x08002b33
 8002abc:	08002b0d 	.word	0x08002b0d
 8002ac0:	08002b1f 	.word	0x08002b1f
 8002ac4:	08002b61 	.word	0x08002b61
 8002ac8:	08002b67 	.word	0x08002b67
 8002acc:	08002b67 	.word	0x08002b67
 8002ad0:	08002b67 	.word	0x08002b67
 8002ad4:	08002b67 	.word	0x08002b67
 8002ad8:	08002b67 	.word	0x08002b67
 8002adc:	08002b67 	.word	0x08002b67
 8002ae0:	08002b67 	.word	0x08002b67
 8002ae4:	08002b67 	.word	0x08002b67
 8002ae8:	08002b67 	.word	0x08002b67
 8002aec:	08002b67 	.word	0x08002b67
 8002af0:	08002b67 	.word	0x08002b67
 8002af4:	08002b67 	.word	0x08002b67
 8002af8:	08002b67 	.word	0x08002b67
 8002afc:	08002b15 	.word	0x08002b15
 8002b00:	08002b29 	.word	0x08002b29
 8002b04:	4a75      	ldr	r2, [pc, #468]	; (8002cdc <HAL_GPIO_Init+0x2a4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b0a:	e02c      	b.n	8002b66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	623b      	str	r3, [r7, #32]
          break;
 8002b12:	e029      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	623b      	str	r3, [r7, #32]
          break;
 8002b1c:	e024      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	3308      	adds	r3, #8
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e01f      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	e01a      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	623b      	str	r3, [r7, #32]
          break;
 8002b3e:	e013      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	611a      	str	r2, [r3, #16]
          break;
 8002b52:	e009      	b.n	8002b68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b54:	2308      	movs	r3, #8
 8002b56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	615a      	str	r2, [r3, #20]
          break;
 8002b5e:	e003      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
          break;
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          break;
 8002b66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2bff      	cmp	r3, #255	; 0xff
 8002b6c:	d801      	bhi.n	8002b72 <HAL_GPIO_Init+0x13a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	e001      	b.n	8002b76 <HAL_GPIO_Init+0x13e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2bff      	cmp	r3, #255	; 0xff
 8002b7c:	d802      	bhi.n	8002b84 <HAL_GPIO_Init+0x14c>
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	e002      	b.n	8002b8a <HAL_GPIO_Init+0x152>
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	3b08      	subs	r3, #8
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	210f      	movs	r1, #15
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	6a39      	ldr	r1, [r7, #32]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80c1 	beq.w	8002d3a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb8:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <HAL_GPIO_Init+0x2a8>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x2a8>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_GPIO_Init+0x2a8>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bd0:	4a44      	ldr	r2, [pc, #272]	; (8002ce4 <HAL_GPIO_Init+0x2ac>)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	220f      	movs	r2, #15
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <HAL_GPIO_Init+0x2b0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d01f      	beq.n	8002c3c <HAL_GPIO_Init+0x204>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <HAL_GPIO_Init+0x2b4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d019      	beq.n	8002c38 <HAL_GPIO_Init+0x200>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3a      	ldr	r2, [pc, #232]	; (8002cf0 <HAL_GPIO_Init+0x2b8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_GPIO_Init+0x1fc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a39      	ldr	r2, [pc, #228]	; (8002cf4 <HAL_GPIO_Init+0x2bc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00d      	beq.n	8002c30 <HAL_GPIO_Init+0x1f8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a38      	ldr	r2, [pc, #224]	; (8002cf8 <HAL_GPIO_Init+0x2c0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <HAL_GPIO_Init+0x1f4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a37      	ldr	r2, [pc, #220]	; (8002cfc <HAL_GPIO_Init+0x2c4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_GPIO_Init+0x1f0>
 8002c24:	2305      	movs	r3, #5
 8002c26:	e00a      	b.n	8002c3e <HAL_GPIO_Init+0x206>
 8002c28:	2306      	movs	r3, #6
 8002c2a:	e008      	b.n	8002c3e <HAL_GPIO_Init+0x206>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e006      	b.n	8002c3e <HAL_GPIO_Init+0x206>
 8002c30:	2303      	movs	r3, #3
 8002c32:	e004      	b.n	8002c3e <HAL_GPIO_Init+0x206>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e002      	b.n	8002c3e <HAL_GPIO_Init+0x206>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_GPIO_Init+0x206>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	f002 0203 	and.w	r2, r2, #3
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	4093      	lsls	r3, r2
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c4e:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <HAL_GPIO_Init+0x2ac>)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4924      	ldr	r1, [pc, #144]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	4920      	ldr	r1, [pc, #128]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	491a      	ldr	r1, [pc, #104]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d025      	beq.n	8002d04 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	4910      	ldr	r1, [pc, #64]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]
 8002cc4:	e025      	b.n	8002d12 <HAL_GPIO_Init+0x2da>
 8002cc6:	bf00      	nop
 8002cc8:	10320000 	.word	0x10320000
 8002ccc:	10310000 	.word	0x10310000
 8002cd0:	10220000 	.word	0x10220000
 8002cd4:	10210000 	.word	0x10210000
 8002cd8:	10120000 	.word	0x10120000
 8002cdc:	10110000 	.word	0x10110000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40010800 	.word	0x40010800
 8002cec:	40010c00 	.word	0x40010c00
 8002cf0:	40011000 	.word	0x40011000
 8002cf4:	40011400 	.word	0x40011400
 8002cf8:	40011800 	.word	0x40011800
 8002cfc:	40011c00 	.word	0x40011c00
 8002d00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4913      	ldr	r1, [pc, #76]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	490e      	ldr	r1, [pc, #56]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60cb      	str	r3, [r1, #12]
 8002d2a:	e006      	b.n	8002d3a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	4909      	ldr	r1, [pc, #36]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f ae7e 	bne.w	8002a4c <HAL_GPIO_Init+0x14>
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	372c      	adds	r7, #44	; 0x2c
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	611a      	str	r2, [r3, #16]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f806 	bl	8002dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e272      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8087 	beq.w	8002f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df4:	4b92      	ldr	r3, [pc, #584]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d00c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e00:	4b8f      	ldr	r3, [pc, #572]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d112      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5e>
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e18:	d10b      	bne.n	8002e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1a:	4b89      	ldr	r3, [pc, #548]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d06c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x12c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d168      	bne.n	8002f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e24c      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x76>
 8002e3c:	4b80      	ldr	r3, [pc, #512]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a7f      	ldr	r2, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e02e      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x98>
 8002e52:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7a      	ldr	r2, [pc, #488]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b78      	ldr	r3, [pc, #480]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a77      	ldr	r2, [pc, #476]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0xbc>
 8002e76:	4b72      	ldr	r3, [pc, #456]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a71      	ldr	r2, [pc, #452]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b6f      	ldr	r3, [pc, #444]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6e      	ldr	r2, [pc, #440]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd4>
 8002e90:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a67      	ldr	r2, [pc, #412]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fcea 	bl	8001888 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fce6 	bl	8001888 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e200      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xe4>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fcd6 	bl	8001888 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fcd2 	bl	8001888 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1ec      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x10c>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f1a:	4b49      	ldr	r3, [pc, #292]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x18c>
 8002f26:	4b46      	ldr	r3, [pc, #280]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b43      	ldr	r3, [pc, #268]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x176>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1c0      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4939      	ldr	r1, [pc, #228]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fc8b 	bl	8001888 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fe fc87 	bl	8001888 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1a1      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4927      	ldr	r1, [pc, #156]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_RCC_OscConfig+0x270>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fc6a 	bl	8001888 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fc66 	bl	8001888 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e180      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d03a      	beq.n	8003058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d019      	beq.n	800301e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_RCC_OscConfig+0x274>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fc4a 	bl	8001888 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fc46 	bl	8001888 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e160      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_RCC_OscConfig+0x26c>)
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003016:	2001      	movs	r0, #1
 8003018:	f000 fad8 	bl	80035cc <RCC_Delay>
 800301c:	e01c      	b.n	8003058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_RCC_OscConfig+0x274>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fe fc30 	bl	8001888 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302a:	e00f      	b.n	800304c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe fc2c 	bl	8001888 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d908      	bls.n	800304c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e146      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	42420000 	.word	0x42420000
 8003048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	4b92      	ldr	r3, [pc, #584]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e9      	bne.n	800302c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a6 	beq.w	80031b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306a:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	4a87      	ldr	r2, [pc, #540]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	61d3      	str	r3, [r2, #28]
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003092:	4b82      	ldr	r3, [pc, #520]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d118      	bne.n	80030d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309e:	4b7f      	ldr	r3, [pc, #508]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7e      	ldr	r2, [pc, #504]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fe fbed 	bl	8001888 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b2:	f7fe fbe9 	bl	8001888 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b64      	cmp	r3, #100	; 0x64
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e103      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	4b75      	ldr	r3, [pc, #468]	; (800329c <HAL_RCC_OscConfig+0x4c8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x312>
 80030d8:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6213      	str	r3, [r2, #32]
 80030e4:	e02d      	b.n	8003142 <HAL_RCC_OscConfig+0x36e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x334>
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a69      	ldr	r2, [pc, #420]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	4b67      	ldr	r3, [pc, #412]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4a66      	ldr	r2, [pc, #408]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	6213      	str	r3, [r2, #32]
 8003106:	e01c      	b.n	8003142 <HAL_RCC_OscConfig+0x36e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x356>
 8003110:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a60      	ldr	r2, [pc, #384]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a5d      	ldr	r2, [pc, #372]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6213      	str	r3, [r2, #32]
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x36e>
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a5a      	ldr	r2, [pc, #360]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6213      	str	r3, [r2, #32]
 8003136:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe fb9d 	bl	8001888 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe fb99 	bl	8001888 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0b1      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ee      	beq.n	8003152 <HAL_RCC_OscConfig+0x37e>
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fb87 	bl	8001888 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fb83 	bl	8001888 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e09b      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	4b40      	ldr	r3, [pc, #256]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a3b      	ldr	r2, [pc, #236]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8087 	beq.w	80032ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d061      	beq.n	800328c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d146      	bne.n	800325e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fb57 	bl	8001888 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7fe fb53 	bl	8001888 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e06d      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003204:	d108      	bne.n	8003218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4921      	ldr	r1, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003218:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a19      	ldr	r1, [r3, #32]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	430b      	orrs	r3, r1
 800322a:	491b      	ldr	r1, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x4cc>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe fb27 	bl	8001888 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323e:	f7fe fb23 	bl	8001888 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e03d      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x46a>
 800325c:	e035      	b.n	80032ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x4cc>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fb10 	bl	8001888 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fb0c 	bl	8001888 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e026      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x498>
 800328a:	e01e      	b.n	80032ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e019      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
 8003298:	40021000 	.word	0x40021000
 800329c:	40007000 	.word	0x40007000
 80032a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_OscConfig+0x500>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000

080032d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d0      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4965      	ldr	r1, [pc, #404]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b8      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	494d      	ldr	r1, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d040      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d115      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e07f      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e073      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c8:	f7fe fa5e 	bl	8001888 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fe fa5a 	bl	8001888 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e053      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d210      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4922      	ldr	r1, [pc, #136]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e032      	b.n	800348e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003466:	f000 f821 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	490a      	ldr	r1, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe f9bc 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	0800596c 	.word	0x0800596c
 80034a4:	20000008 	.word	0x20000008
 80034a8:	2000000c 	.word	0x2000000c

080034ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b490      	push	{r4, r7}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <HAL_RCC_GetSysClockFreq+0xac>)
 80034b4:	1d3c      	adds	r4, r7, #4
 80034b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034bc:	f240 2301 	movw	r3, #513	; 0x201
 80034c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_RCC_GetSysClockFreq+0xb0>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x40>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x46>
 80034ea:	e02b      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ec:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034ee:	623b      	str	r3, [r7, #32]
      break;
 80034f0:	e02b      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3328      	adds	r3, #40	; 0x28
 80034fc:	443b      	add	r3, r7
 80034fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003502:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0c5b      	lsrs	r3, r3, #17
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	3328      	adds	r3, #40	; 0x28
 800351a:	443b      	add	r3, r7
 800351c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003520:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003526:	fb03 f202 	mul.w	r2, r3, r2
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	e004      	b.n	800353e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	623b      	str	r3, [r7, #32]
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003546:	623b      	str	r3, [r7, #32]
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6a3b      	ldr	r3, [r7, #32]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3728      	adds	r7, #40	; 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc90      	pop	{r4, r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	0800535c 	.word	0x0800535c
 800355c:	40021000 	.word	0x40021000
 8003560:	007a1200 	.word	0x007a1200
 8003564:	003d0900 	.word	0x003d0900

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <HAL_RCC_GetHCLKFreq+0x10>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000008 	.word	0x20000008

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff2 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	0800597c 	.word	0x0800597c

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffde 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0adb      	lsrs	r3, r3, #11
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	0800597c 	.word	0x0800597c

080035cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <RCC_Delay+0x34>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <RCC_Delay+0x38>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0a5b      	lsrs	r3, r3, #9
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035e8:	bf00      	nop
  }
  while (Delay --);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <RCC_Delay+0x1c>
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000008 	.word	0x20000008
 8003604:	10624dd3 	.word	0x10624dd3

08003608 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d07d      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003628:	4b4f      	ldr	r3, [pc, #316]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	4b4c      	ldr	r3, [pc, #304]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4a4b      	ldr	r2, [pc, #300]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363e:	61d3      	str	r3, [r2, #28]
 8003640:	4b49      	ldr	r3, [pc, #292]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d118      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365c:	4b43      	ldr	r3, [pc, #268]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a42      	ldr	r2, [pc, #264]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003668:	f7fe f90e 	bl	8001888 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	e008      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fe f90a 	bl	8001888 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e06d      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d027      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036bc:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d014      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe f8d9 	bl	8001888 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe f8d5 	bl	8001888 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e036      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4917      	ldr	r1, [pc, #92]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	4313      	orrs	r3, r2
 800370c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a13      	ldr	r2, [pc, #76]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	490b      	ldr	r1, [pc, #44]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	42420440 	.word	0x42420440

08003774 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b08d      	sub	sp, #52	; 0x34
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800377e:	f107 040c 	add.w	r4, r7, #12
 8003782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003788:	f240 2301 	movw	r3, #513	; 0x201
 800378c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	2300      	movs	r3, #0
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003796:	2300      	movs	r3, #0
 8003798:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	f200 80b4 	bhi.w	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	08003893 	.word	0x08003893
 80037b8:	080038f9 	.word	0x080038f9
 80037bc:	08003915 	.word	0x08003915
 80037c0:	08003883 	.word	0x08003883
 80037c4:	08003915 	.word	0x08003915
 80037c8:	08003915 	.word	0x08003915
 80037cc:	08003915 	.word	0x08003915
 80037d0:	0800388b 	.word	0x0800388b
 80037d4:	08003915 	.word	0x08003915
 80037d8:	08003915 	.word	0x08003915
 80037dc:	08003915 	.word	0x08003915
 80037e0:	08003915 	.word	0x08003915
 80037e4:	08003915 	.word	0x08003915
 80037e8:	08003915 	.word	0x08003915
 80037ec:	08003915 	.word	0x08003915
 80037f0:	080037f5 	.word	0x080037f5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80037f4:	4b4d      	ldr	r3, [pc, #308]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037fa:	4b4c      	ldr	r3, [pc, #304]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8088 	beq.w	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	0c9b      	lsrs	r3, r3, #18
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	3330      	adds	r3, #48	; 0x30
 8003812:	443b      	add	r3, r7
 8003814:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003818:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d017      	beq.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003824:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c5b      	lsrs	r3, r3, #17
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	3330      	adds	r3, #48	; 0x30
 8003830:	443b      	add	r3, r7
 8003832:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003842:	4a3b      	ldr	r2, [pc, #236]	; (8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	fbb2 f2f3 	udiv	r2, r2, r3
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	e004      	b.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	4a37      	ldr	r2, [pc, #220]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800385e:	4b33      	ldr	r3, [pc, #204]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386a:	d102      	bne.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003870:	e052      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4a30      	ldr	r2, [pc, #192]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003880:	e04a      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003882:	f7ff fe13 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003886:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003888:	e049      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800388a:	f7ff fe0f 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800388e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003890:	e045      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a2:	d108      	bne.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80038ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b4:	e01f      	b.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d109      	bne.n	80038d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80038ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d4:	e00f      	b.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e0:	d11c      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80038ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80038f4:	e012      	b.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80038f6:	e011      	b.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80038f8:	f7ff fe54 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0b9b      	lsrs	r3, r3, #14
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	3301      	adds	r3, #1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003912:	e004      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8003914:	bf00      	nop
 8003916:	e002      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 800391c:	bf00      	nop
    }
  }
  return (frequency);
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003920:	4618      	mov	r0, r3
 8003922:	3734      	adds	r7, #52	; 0x34
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	0800536c 	.word	0x0800536c
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	003d0900 	.word	0x003d0900
 8003938:	aaaaaaab 	.word	0xaaaaaaab

0800393c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e076      	b.n	8003a3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d009      	beq.n	8003974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
 8003966:	e005      	b.n	8003974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fda4 	bl	80014dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	ea42 0103 	orr.w	r1, r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	0c1a      	lsrs	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f002 0204 	and.w	r2, r2, #4
 8003a1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_SPI_Transmit+0x22>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e126      	b.n	8003cb4 <HAL_SPI_Transmit+0x270>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a6e:	f7fd ff0b 	bl	8001888 <HAL_GetTick>
 8003a72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d002      	beq.n	8003a8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a88:	e10b      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Transmit+0x52>
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a9a:	e102      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	88fa      	ldrh	r2, [r7, #6]
 8003aba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae2:	d10f      	bne.n	8003b04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d007      	beq.n	8003b22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2a:	d14b      	bne.n	8003bc4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Transmit+0xf6>
 8003b34:	8afb      	ldrh	r3, [r7, #22]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d13e      	bne.n	8003bb8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b5e:	e02b      	b.n	8003bb8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d112      	bne.n	8003b94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b92:	e011      	b.n	8003bb8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b94:	f7fd fe78 	bl	8001888 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d803      	bhi.n	8003bac <HAL_SPI_Transmit+0x168>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003baa:	d102      	bne.n	8003bb2 <HAL_SPI_Transmit+0x16e>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bb6:	e074      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ce      	bne.n	8003b60 <HAL_SPI_Transmit+0x11c>
 8003bc2:	e04c      	b.n	8003c5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0x18e>
 8003bcc:	8afb      	ldrh	r3, [r7, #22]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d140      	bne.n	8003c54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bf8:	e02c      	b.n	8003c54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d113      	bne.n	8003c30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c2e:	e011      	b.n	8003c54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c30:	f7fd fe2a 	bl	8001888 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d803      	bhi.n	8003c48 <HAL_SPI_Transmit+0x204>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c46:	d102      	bne.n	8003c4e <HAL_SPI_Transmit+0x20a>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c52:	e026      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1cd      	bne.n	8003bfa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fbb8 	bl	80043d8 <SPI_EndRxTxTransaction>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e000      	b.n	8003ca2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ca0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd8:	d112      	bne.n	8003d00 <HAL_SPI_Receive+0x44>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10e      	bne.n	8003d00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f8f1 	bl	8003ede <HAL_SPI_TransmitReceive>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	e0ea      	b.n	8003ed6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_SPI_Receive+0x52>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e0e3      	b.n	8003ed6 <HAL_SPI_Receive+0x21a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d16:	f7fd fdb7 	bl	8001888 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d002      	beq.n	8003d2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d2c:	e0ca      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_Receive+0x7e>
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d3e:	e0c1      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2204      	movs	r2, #4
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	88fa      	ldrh	r2, [r7, #6]
 8003d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d86:	d10f      	bne.n	8003da8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d007      	beq.n	8003dc6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d162      	bne.n	8003e94 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dce:	e02e      	b.n	8003e2e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d115      	bne.n	8003e0a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f103 020c 	add.w	r2, r3, #12
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e08:	e011      	b.n	8003e2e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0a:	f7fd fd3d 	bl	8001888 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d803      	bhi.n	8003e22 <HAL_SPI_Receive+0x166>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e20:	d102      	bne.n	8003e28 <HAL_SPI_Receive+0x16c>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e2c:	e04a      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1cb      	bne.n	8003dd0 <HAL_SPI_Receive+0x114>
 8003e38:	e031      	b.n	8003e9e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d113      	bne.n	8003e70 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	b292      	uxth	r2, r2
 8003e54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	1c9a      	adds	r2, r3, #2
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e6e:	e011      	b.n	8003e94 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e70:	f7fd fd0a 	bl	8001888 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d803      	bhi.n	8003e88 <HAL_SPI_Receive+0x1cc>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e86:	d102      	bne.n	8003e8e <HAL_SPI_Receive+0x1d2>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e92:	e017      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1cd      	bne.n	8003e3a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fa46 	bl	8004334 <SPI_EndRxTransaction>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
 8003ec0:	e000      	b.n	8003ec4 <HAL_SPI_Receive+0x208>
  }

error :
 8003ec2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08c      	sub	sp, #48	; 0x30
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eec:	2301      	movs	r3, #1
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x26>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e18a      	b.n	800421a <HAL_SPI_TransmitReceive+0x33c>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f0c:	f7fd fcbc 	bl	8001888 <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f22:	887b      	ldrh	r3, [r7, #2]
 8003f24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d00f      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x70>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f34:	d107      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x68>
 8003f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f4c:	e15b      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x82>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x82>
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f66:	e14e      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d003      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2205      	movs	r2, #5
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	887a      	ldrh	r2, [r7, #2]
 8003f9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d007      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd8:	d178      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_SPI_TransmitReceive+0x10a>
 8003fe2:	8b7b      	ldrh	r3, [r7, #26]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d166      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800400c:	e053      	b.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b02      	cmp	r3, #2
 800401a:	d11b      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x176>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x176>
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d113      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	881a      	ldrh	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d119      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x1b8>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d014      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	b292      	uxth	r2, r2
 8004078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004092:	2301      	movs	r3, #1
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004096:	f7fd fbf7 	bl	8001888 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d807      	bhi.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ac:	d003      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040b4:	e0a7      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1a6      	bne.n	800400e <HAL_SPI_TransmitReceive+0x130>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1a1      	bne.n	800400e <HAL_SPI_TransmitReceive+0x130>
 80040ca:	e07c      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_TransmitReceive+0x1fc>
 80040d4:	8b7b      	ldrh	r3, [r7, #26]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d16b      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004100:	e057      	b.n	80041b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b02      	cmp	r3, #2
 800410e:	d11c      	bne.n	800414a <HAL_SPI_TransmitReceive+0x26c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d017      	beq.n	800414a <HAL_SPI_TransmitReceive+0x26c>
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d114      	bne.n	800414a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d119      	bne.n	800418c <HAL_SPI_TransmitReceive+0x2ae>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d014      	beq.n	800418c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004188:	2301      	movs	r3, #1
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800418c:	f7fd fb7c 	bl	8001888 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004198:	429a      	cmp	r2, r3
 800419a:	d803      	bhi.n	80041a4 <HAL_SPI_TransmitReceive+0x2c6>
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a2:	d102      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x2cc>
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041b0:	e029      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1a2      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x224>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d19d      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f904 	bl	80043d8 <SPI_EndRxTxTransaction>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041e2:	e010      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	e000      	b.n	8004206 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004204:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800421a:	4618      	mov	r0, r3
 800421c:	3730      	adds	r7, #48	; 0x30
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004234:	f7fd fb28 	bl	8001888 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4413      	add	r3, r2
 8004242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004244:	f7fd fb20 	bl	8001888 <HAL_GetTick>
 8004248:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	015b      	lsls	r3, r3, #5
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800425a:	e054      	b.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004262:	d050      	beq.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004264:	f7fd fb10 	bl	8001888 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	429a      	cmp	r2, r3
 8004272:	d902      	bls.n	800427a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d13d      	bne.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004288:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004292:	d111      	bne.n	80042b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429c:	d004      	beq.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a6:	d107      	bne.n	80042b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c0:	d10f      	bne.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e017      	b.n	8004326 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3b01      	subs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4013      	ands	r3, r2
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	429a      	cmp	r2, r3
 8004314:	bf0c      	ite	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	2300      	movne	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	429a      	cmp	r2, r3
 8004322:	d19b      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000008 	.word	0x20000008

08004334 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004348:	d111      	bne.n	800436e <SPI_EndRxTransaction+0x3a>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d004      	beq.n	800435e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d107      	bne.n	800436e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004376:	d117      	bne.n	80043a8 <SPI_EndRxTransaction+0x74>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004380:	d112      	bne.n	80043a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2200      	movs	r2, #0
 800438a:	2101      	movs	r1, #1
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff ff49 	bl	8004224 <SPI_WaitFlagStateUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01a      	beq.n	80043ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	f043 0220 	orr.w	r2, r3, #32
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e013      	b.n	80043d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff ff36 	bl	8004224 <SPI_WaitFlagStateUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e000      	b.n	80043d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ff18 	bl	8004224 <SPI_WaitFlagStateUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e000      	b.n	800440c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_SRAM_Init+0x1c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d101      	bne.n	8004434 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e038      	b.n	80044a6 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7fd f91f 	bl	800168c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3308      	adds	r3, #8
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f000 f9df 	bl	800481c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	461a      	mov	r2, r3
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	f000 fa41 	bl	80048f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6858      	ldr	r0, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	f000 fa6c 	bl	8004958 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	6892      	ldr	r2, [r2, #8]
 8004488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	6892      	ldr	r2, [r2, #8]
 8004494:	f041 0101 	orr.w	r1, r1, #1
 8004498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e03f      	b.n	8004540 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fd f84b 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2224      	movs	r2, #36	; 0x24
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f904 	bl	8004700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004506:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004516:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004526:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b20      	cmp	r3, #32
 8004566:	d17c      	bne.n	8004662 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Transmit+0x2c>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e075      	b.n	8004664 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_UART_Transmit+0x3e>
 8004582:	2302      	movs	r3, #2
 8004584:	e06e      	b.n	8004664 <HAL_UART_Transmit+0x11c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2221      	movs	r2, #33	; 0x21
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459c:	f7fd f974 	bl	8001888 <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b6:	d108      	bne.n	80045ca <HAL_UART_Transmit+0x82>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	e003      	b.n	80045d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045da:	e02a      	b.n	8004632 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f840 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e036      	b.n	8004664 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	3302      	adds	r3, #2
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	e007      	b.n	8004624 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3301      	adds	r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1cf      	bne.n	80045dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2200      	movs	r2, #0
 8004644:	2140      	movs	r1, #64	; 0x40
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f810 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e006      	b.n	8004664 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467c:	e02c      	b.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004684:	d028      	beq.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <UART_WaitOnFlagUntilTimeout+0x30>
 800468c:	f7fd f8fc 	bl	8001888 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d21d      	bcs.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e00f      	b.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d0c3      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800473a:	f023 030c 	bic.w	r3, r3, #12
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	430b      	orrs	r3, r1
 8004746:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2c      	ldr	r2, [pc, #176]	; (8004814 <UART_SetConfig+0x114>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d103      	bne.n	8004770 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004768:	f7fe ff1c 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	e002      	b.n	8004776 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe ff04 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8004774:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009a      	lsls	r2, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <UART_SetConfig+0x118>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	0119      	lsls	r1, r3, #4
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009a      	lsls	r2, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <UART_SetConfig+0x118>)
 80047ae:	fba3 0302 	umull	r0, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2064      	movs	r0, #100	; 0x64
 80047b6:	fb00 f303 	mul.w	r3, r0, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	4a15      	ldr	r2, [pc, #84]	; (8004818 <UART_SetConfig+0x118>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	4419      	add	r1, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009a      	lsls	r2, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <UART_SetConfig+0x118>)
 80047e6:	fba3 0302 	umull	r0, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2064      	movs	r0, #100	; 0x64
 80047ee:	fb00 f303 	mul.w	r3, r0, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	3332      	adds	r3, #50	; 0x32
 80047f8:	4a07      	ldr	r2, [pc, #28]	; (8004818 <UART_SetConfig+0x118>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	440a      	add	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40013800 	.word	0x40013800
 8004818:	51eb851f 	.word	0x51eb851f

0800481c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	f023 0101 	bic.w	r1, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b08      	cmp	r3, #8
 8004844:	d102      	bne.n	800484c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004846:	2340      	movs	r3, #64	; 0x40
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e001      	b.n	8004850 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800485c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004862:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004868:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800486e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004874:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800487a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004880:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004886:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800488c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <FSMC_NORSRAM_Init+0xd0>)
 80048ac:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048b4:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80048bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	ea02 0103 	and.w	r1, r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4319      	orrs	r1, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	0008fb7f 	.word	0x0008fb7f

080048f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004906:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	431a      	orrs	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	431a      	orrs	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	431a      	orrs	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	3b01      	subs	r3, #1
 800492c:	051b      	lsls	r3, r3, #20
 800492e:	431a      	orrs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	3b02      	subs	r3, #2
 8004936:	061b      	lsls	r3, r3, #24
 8004938:	431a      	orrs	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	3201      	adds	r2, #1
 8004944:	4319      	orrs	r1, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800496c:	d11d      	bne.n	80049aa <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004978:	4013      	ands	r3, r2
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	6811      	ldr	r1, [r2, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	6852      	ldr	r2, [r2, #4]
 8004982:	0112      	lsls	r2, r2, #4
 8004984:	4311      	orrs	r1, r2
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	6892      	ldr	r2, [r2, #8]
 800498a:	0212      	lsls	r2, r2, #8
 800498c:	4311      	orrs	r1, r2
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	6992      	ldr	r2, [r2, #24]
 8004992:	4311      	orrs	r1, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	68d2      	ldr	r2, [r2, #12]
 8004998:	0412      	lsls	r2, r2, #16
 800499a:	430a      	orrs	r2, r1
 800499c:	ea43 0102 	orr.w	r1, r3, r2
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049a8:	e005      	b.n	80049b6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80049b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	cff00000 	.word	0xcff00000

080049c8 <__errno>:
 80049c8:	4b01      	ldr	r3, [pc, #4]	; (80049d0 <__errno+0x8>)
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000014 	.word	0x20000014

080049d4 <__libc_init_array>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	2600      	movs	r6, #0
 80049d8:	4d0c      	ldr	r5, [pc, #48]	; (8004a0c <__libc_init_array+0x38>)
 80049da:	4c0d      	ldr	r4, [pc, #52]	; (8004a10 <__libc_init_array+0x3c>)
 80049dc:	1b64      	subs	r4, r4, r5
 80049de:	10a4      	asrs	r4, r4, #2
 80049e0:	42a6      	cmp	r6, r4
 80049e2:	d109      	bne.n	80049f8 <__libc_init_array+0x24>
 80049e4:	f000 fc9c 	bl	8005320 <_init>
 80049e8:	2600      	movs	r6, #0
 80049ea:	4d0a      	ldr	r5, [pc, #40]	; (8004a14 <__libc_init_array+0x40>)
 80049ec:	4c0a      	ldr	r4, [pc, #40]	; (8004a18 <__libc_init_array+0x44>)
 80049ee:	1b64      	subs	r4, r4, r5
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	42a6      	cmp	r6, r4
 80049f4:	d105      	bne.n	8004a02 <__libc_init_array+0x2e>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fc:	4798      	blx	r3
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7ee      	b.n	80049e0 <__libc_init_array+0xc>
 8004a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a06:	4798      	blx	r3
 8004a08:	3601      	adds	r6, #1
 8004a0a:	e7f2      	b.n	80049f2 <__libc_init_array+0x1e>
 8004a0c:	080059b8 	.word	0x080059b8
 8004a10:	080059b8 	.word	0x080059b8
 8004a14:	080059b8 	.word	0x080059b8
 8004a18:	080059bc 	.word	0x080059bc

08004a1c <memset>:
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4402      	add	r2, r0
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d100      	bne.n	8004a26 <memset+0xa>
 8004a24:	4770      	bx	lr
 8004a26:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2a:	e7f9      	b.n	8004a20 <memset+0x4>

08004a2c <siprintf>:
 8004a2c:	b40e      	push	{r1, r2, r3}
 8004a2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a32:	b500      	push	{lr}
 8004a34:	b09c      	sub	sp, #112	; 0x70
 8004a36:	ab1d      	add	r3, sp, #116	; 0x74
 8004a38:	9002      	str	r0, [sp, #8]
 8004a3a:	9006      	str	r0, [sp, #24]
 8004a3c:	9107      	str	r1, [sp, #28]
 8004a3e:	9104      	str	r1, [sp, #16]
 8004a40:	4808      	ldr	r0, [pc, #32]	; (8004a64 <siprintf+0x38>)
 8004a42:	4909      	ldr	r1, [pc, #36]	; (8004a68 <siprintf+0x3c>)
 8004a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a48:	9105      	str	r1, [sp, #20]
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	a902      	add	r1, sp, #8
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	f000 f868 	bl	8004b24 <_svfiprintf_r>
 8004a54:	2200      	movs	r2, #0
 8004a56:	9b02      	ldr	r3, [sp, #8]
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	b01c      	add	sp, #112	; 0x70
 8004a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a60:	b003      	add	sp, #12
 8004a62:	4770      	bx	lr
 8004a64:	20000014 	.word	0x20000014
 8004a68:	ffff0208 	.word	0xffff0208

08004a6c <__ssputs_r>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	688e      	ldr	r6, [r1, #8]
 8004a72:	4682      	mov	sl, r0
 8004a74:	429e      	cmp	r6, r3
 8004a76:	460c      	mov	r4, r1
 8004a78:	4690      	mov	r8, r2
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	d838      	bhi.n	8004af0 <__ssputs_r+0x84>
 8004a7e:	898a      	ldrh	r2, [r1, #12]
 8004a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a84:	d032      	beq.n	8004aec <__ssputs_r+0x80>
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	6909      	ldr	r1, [r1, #16]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	eba5 0901 	sub.w	r9, r5, r1
 8004a90:	6965      	ldr	r5, [r4, #20]
 8004a92:	444b      	add	r3, r9
 8004a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a9c:	106d      	asrs	r5, r5, #1
 8004a9e:	429d      	cmp	r5, r3
 8004aa0:	bf38      	it	cc
 8004aa2:	461d      	movcc	r5, r3
 8004aa4:	0553      	lsls	r3, r2, #21
 8004aa6:	d531      	bpl.n	8004b0c <__ssputs_r+0xa0>
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f000 fb6f 	bl	800518c <_malloc_r>
 8004aae:	4606      	mov	r6, r0
 8004ab0:	b950      	cbnz	r0, 8004ac8 <__ssputs_r+0x5c>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab8:	f8ca 3000 	str.w	r3, [sl]
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	464a      	mov	r2, r9
 8004aca:	6921      	ldr	r1, [r4, #16]
 8004acc:	f000 face 	bl	800506c <memcpy>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	6126      	str	r6, [r4, #16]
 8004ade:	444e      	add	r6, r9
 8004ae0:	6026      	str	r6, [r4, #0]
 8004ae2:	463e      	mov	r6, r7
 8004ae4:	6165      	str	r5, [r4, #20]
 8004ae6:	eba5 0509 	sub.w	r5, r5, r9
 8004aea:	60a5      	str	r5, [r4, #8]
 8004aec:	42be      	cmp	r6, r7
 8004aee:	d900      	bls.n	8004af2 <__ssputs_r+0x86>
 8004af0:	463e      	mov	r6, r7
 8004af2:	4632      	mov	r2, r6
 8004af4:	4641      	mov	r1, r8
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	f000 fac6 	bl	8005088 <memmove>
 8004afc:	68a3      	ldr	r3, [r4, #8]
 8004afe:	2000      	movs	r0, #0
 8004b00:	1b9b      	subs	r3, r3, r6
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	4433      	add	r3, r6
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	e7db      	b.n	8004ac4 <__ssputs_r+0x58>
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	f000 fbb1 	bl	8005274 <_realloc_r>
 8004b12:	4606      	mov	r6, r0
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1e1      	bne.n	8004adc <__ssputs_r+0x70>
 8004b18:	4650      	mov	r0, sl
 8004b1a:	6921      	ldr	r1, [r4, #16]
 8004b1c:	f000 face 	bl	80050bc <_free_r>
 8004b20:	e7c7      	b.n	8004ab2 <__ssputs_r+0x46>
	...

08004b24 <_svfiprintf_r>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4698      	mov	r8, r3
 8004b2a:	898b      	ldrh	r3, [r1, #12]
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	460d      	mov	r5, r1
 8004b32:	4614      	mov	r4, r2
 8004b34:	b09d      	sub	sp, #116	; 0x74
 8004b36:	d50e      	bpl.n	8004b56 <_svfiprintf_r+0x32>
 8004b38:	690b      	ldr	r3, [r1, #16]
 8004b3a:	b963      	cbnz	r3, 8004b56 <_svfiprintf_r+0x32>
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	f000 fb25 	bl	800518c <_malloc_r>
 8004b42:	6028      	str	r0, [r5, #0]
 8004b44:	6128      	str	r0, [r5, #16]
 8004b46:	b920      	cbnz	r0, 8004b52 <_svfiprintf_r+0x2e>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b50:	e0d1      	b.n	8004cf6 <_svfiprintf_r+0x1d2>
 8004b52:	2340      	movs	r3, #64	; 0x40
 8004b54:	616b      	str	r3, [r5, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b60:	2330      	movs	r3, #48	; 0x30
 8004b62:	f04f 0901 	mov.w	r9, #1
 8004b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d10 <_svfiprintf_r+0x1ec>
 8004b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b72:	4623      	mov	r3, r4
 8004b74:	469a      	mov	sl, r3
 8004b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7a:	b10a      	cbz	r2, 8004b80 <_svfiprintf_r+0x5c>
 8004b7c:	2a25      	cmp	r2, #37	; 0x25
 8004b7e:	d1f9      	bne.n	8004b74 <_svfiprintf_r+0x50>
 8004b80:	ebba 0b04 	subs.w	fp, sl, r4
 8004b84:	d00b      	beq.n	8004b9e <_svfiprintf_r+0x7a>
 8004b86:	465b      	mov	r3, fp
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff ff6d 	bl	8004a6c <__ssputs_r>
 8004b92:	3001      	adds	r0, #1
 8004b94:	f000 80aa 	beq.w	8004cec <_svfiprintf_r+0x1c8>
 8004b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b9a:	445a      	add	r2, fp
 8004b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80a2 	beq.w	8004cec <_svfiprintf_r+0x1c8>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb2:	f10a 0a01 	add.w	sl, sl, #1
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc0:	4654      	mov	r4, sl
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc8:	4851      	ldr	r0, [pc, #324]	; (8004d10 <_svfiprintf_r+0x1ec>)
 8004bca:	f000 fa41 	bl	8005050 <memchr>
 8004bce:	9a04      	ldr	r2, [sp, #16]
 8004bd0:	b9d8      	cbnz	r0, 8004c0a <_svfiprintf_r+0xe6>
 8004bd2:	06d0      	lsls	r0, r2, #27
 8004bd4:	bf44      	itt	mi
 8004bd6:	2320      	movmi	r3, #32
 8004bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bdc:	0711      	lsls	r1, r2, #28
 8004bde:	bf44      	itt	mi
 8004be0:	232b      	movmi	r3, #43	; 0x2b
 8004be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b2a      	cmp	r3, #42	; 0x2a
 8004bec:	d015      	beq.n	8004c1a <_svfiprintf_r+0xf6>
 8004bee:	4654      	mov	r4, sl
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f04f 0c0a 	mov.w	ip, #10
 8004bf6:	9a07      	ldr	r2, [sp, #28]
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfe:	3b30      	subs	r3, #48	; 0x30
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	d94e      	bls.n	8004ca2 <_svfiprintf_r+0x17e>
 8004c04:	b1b0      	cbz	r0, 8004c34 <_svfiprintf_r+0x110>
 8004c06:	9207      	str	r2, [sp, #28]
 8004c08:	e014      	b.n	8004c34 <_svfiprintf_r+0x110>
 8004c0a:	eba0 0308 	sub.w	r3, r0, r8
 8004c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	46a2      	mov	sl, r4
 8004c16:	9304      	str	r3, [sp, #16]
 8004c18:	e7d2      	b.n	8004bc0 <_svfiprintf_r+0x9c>
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9103      	str	r1, [sp, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bfbb      	ittet	lt
 8004c26:	425b      	neglt	r3, r3
 8004c28:	f042 0202 	orrlt.w	r2, r2, #2
 8004c2c:	9307      	strge	r3, [sp, #28]
 8004c2e:	9307      	strlt	r3, [sp, #28]
 8004c30:	bfb8      	it	lt
 8004c32:	9204      	strlt	r2, [sp, #16]
 8004c34:	7823      	ldrb	r3, [r4, #0]
 8004c36:	2b2e      	cmp	r3, #46	; 0x2e
 8004c38:	d10c      	bne.n	8004c54 <_svfiprintf_r+0x130>
 8004c3a:	7863      	ldrb	r3, [r4, #1]
 8004c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3e:	d135      	bne.n	8004cac <_svfiprintf_r+0x188>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	3402      	adds	r4, #2
 8004c44:	1d1a      	adds	r2, r3, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	9203      	str	r2, [sp, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfb8      	it	lt
 8004c4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004d14 <_svfiprintf_r+0x1f0>
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4650      	mov	r0, sl
 8004c5c:	7821      	ldrb	r1, [r4, #0]
 8004c5e:	f000 f9f7 	bl	8005050 <memchr>
 8004c62:	b140      	cbz	r0, 8004c76 <_svfiprintf_r+0x152>
 8004c64:	2340      	movs	r3, #64	; 0x40
 8004c66:	eba0 000a 	sub.w	r0, r0, sl
 8004c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c6e:	9b04      	ldr	r3, [sp, #16]
 8004c70:	3401      	adds	r4, #1
 8004c72:	4303      	orrs	r3, r0
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7a:	2206      	movs	r2, #6
 8004c7c:	4826      	ldr	r0, [pc, #152]	; (8004d18 <_svfiprintf_r+0x1f4>)
 8004c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c82:	f000 f9e5 	bl	8005050 <memchr>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d038      	beq.n	8004cfc <_svfiprintf_r+0x1d8>
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <_svfiprintf_r+0x1f8>)
 8004c8c:	bb1b      	cbnz	r3, 8004cd6 <_svfiprintf_r+0x1b2>
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	3307      	adds	r3, #7
 8004c92:	f023 0307 	bic.w	r3, r3, #7
 8004c96:	3308      	adds	r3, #8
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9c:	4433      	add	r3, r6
 8004c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca0:	e767      	b.n	8004b72 <_svfiprintf_r+0x4e>
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004caa:	e7a5      	b.n	8004bf8 <_svfiprintf_r+0xd4>
 8004cac:	2300      	movs	r3, #0
 8004cae:	f04f 0c0a 	mov.w	ip, #10
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	3401      	adds	r4, #1
 8004cb6:	9305      	str	r3, [sp, #20]
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cbe:	3a30      	subs	r2, #48	; 0x30
 8004cc0:	2a09      	cmp	r2, #9
 8004cc2:	d903      	bls.n	8004ccc <_svfiprintf_r+0x1a8>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0c5      	beq.n	8004c54 <_svfiprintf_r+0x130>
 8004cc8:	9105      	str	r1, [sp, #20]
 8004cca:	e7c3      	b.n	8004c54 <_svfiprintf_r+0x130>
 8004ccc:	4604      	mov	r4, r0
 8004cce:	2301      	movs	r3, #1
 8004cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd4:	e7f0      	b.n	8004cb8 <_svfiprintf_r+0x194>
 8004cd6:	ab03      	add	r3, sp, #12
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	462a      	mov	r2, r5
 8004cdc:	4638      	mov	r0, r7
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <_svfiprintf_r+0x1fc>)
 8004ce0:	a904      	add	r1, sp, #16
 8004ce2:	f3af 8000 	nop.w
 8004ce6:	1c42      	adds	r2, r0, #1
 8004ce8:	4606      	mov	r6, r0
 8004cea:	d1d6      	bne.n	8004c9a <_svfiprintf_r+0x176>
 8004cec:	89ab      	ldrh	r3, [r5, #12]
 8004cee:	065b      	lsls	r3, r3, #25
 8004cf0:	f53f af2c 	bmi.w	8004b4c <_svfiprintf_r+0x28>
 8004cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf6:	b01d      	add	sp, #116	; 0x74
 8004cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfc:	ab03      	add	r3, sp, #12
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	462a      	mov	r2, r5
 8004d02:	4638      	mov	r0, r7
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <_svfiprintf_r+0x1fc>)
 8004d06:	a904      	add	r1, sp, #16
 8004d08:	f000 f87c 	bl	8004e04 <_printf_i>
 8004d0c:	e7eb      	b.n	8004ce6 <_svfiprintf_r+0x1c2>
 8004d0e:	bf00      	nop
 8004d10:	08005984 	.word	0x08005984
 8004d14:	0800598a 	.word	0x0800598a
 8004d18:	0800598e 	.word	0x0800598e
 8004d1c:	00000000 	.word	0x00000000
 8004d20:	08004a6d 	.word	0x08004a6d

08004d24 <_printf_common>:
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	4616      	mov	r6, r2
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	688a      	ldr	r2, [r1, #8]
 8004d2e:	690b      	ldr	r3, [r1, #16]
 8004d30:	4607      	mov	r7, r0
 8004d32:	4293      	cmp	r3, r2
 8004d34:	bfb8      	it	lt
 8004d36:	4613      	movlt	r3, r2
 8004d38:	6033      	str	r3, [r6, #0]
 8004d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d44:	b10a      	cbz	r2, 8004d4a <_printf_common+0x26>
 8004d46:	3301      	adds	r3, #1
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	0699      	lsls	r1, r3, #26
 8004d4e:	bf42      	ittt	mi
 8004d50:	6833      	ldrmi	r3, [r6, #0]
 8004d52:	3302      	addmi	r3, #2
 8004d54:	6033      	strmi	r3, [r6, #0]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d106      	bne.n	8004d6c <_printf_common+0x48>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	dc28      	bgt.n	8004dbe <_printf_common+0x9a>
 8004d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d70:	1e13      	subs	r3, r2, #0
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	bf18      	it	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	0692      	lsls	r2, r2, #26
 8004d7a:	d42d      	bmi.n	8004dd8 <_printf_common+0xb4>
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d020      	beq.n	8004dcc <_printf_common+0xa8>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	68e5      	ldr	r5, [r4, #12]
 8004d8e:	f003 0306 	and.w	r3, r3, #6
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	bf18      	it	ne
 8004d96:	2500      	movne	r5, #0
 8004d98:	6832      	ldr	r2, [r6, #0]
 8004d9a:	f04f 0600 	mov.w	r6, #0
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	bf08      	it	eq
 8004da2:	1aad      	subeq	r5, r5, r2
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	bf08      	it	eq
 8004da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dac:	4293      	cmp	r3, r2
 8004dae:	bfc4      	itt	gt
 8004db0:	1a9b      	subgt	r3, r3, r2
 8004db2:	18ed      	addgt	r5, r5, r3
 8004db4:	341a      	adds	r4, #26
 8004db6:	42b5      	cmp	r5, r6
 8004db8:	d11a      	bne.n	8004df0 <_printf_common+0xcc>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e008      	b.n	8004dd0 <_printf_common+0xac>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_printf_common+0xb0>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7c4      	b.n	8004d62 <_printf_common+0x3e>
 8004dd8:	2030      	movs	r0, #48	; 0x30
 8004dda:	18e1      	adds	r1, r4, r3
 8004ddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de6:	4422      	add	r2, r4
 8004de8:	3302      	adds	r3, #2
 8004dea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dee:	e7c5      	b.n	8004d7c <_printf_common+0x58>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4622      	mov	r2, r4
 8004df4:	4649      	mov	r1, r9
 8004df6:	4638      	mov	r0, r7
 8004df8:	47c0      	blx	r8
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0e6      	beq.n	8004dcc <_printf_common+0xa8>
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7d9      	b.n	8004db6 <_printf_common+0x92>
	...

08004e04 <_printf_i>:
 8004e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	7e0f      	ldrb	r7, [r1, #24]
 8004e0a:	4691      	mov	r9, r2
 8004e0c:	2f78      	cmp	r7, #120	; 0x78
 8004e0e:	4680      	mov	r8, r0
 8004e10:	460c      	mov	r4, r1
 8004e12:	469a      	mov	sl, r3
 8004e14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e1a:	d807      	bhi.n	8004e2c <_printf_i+0x28>
 8004e1c:	2f62      	cmp	r7, #98	; 0x62
 8004e1e:	d80a      	bhi.n	8004e36 <_printf_i+0x32>
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	f000 80d9 	beq.w	8004fd8 <_printf_i+0x1d4>
 8004e26:	2f58      	cmp	r7, #88	; 0x58
 8004e28:	f000 80a4 	beq.w	8004f74 <_printf_i+0x170>
 8004e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e34:	e03a      	b.n	8004eac <_printf_i+0xa8>
 8004e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e3a:	2b15      	cmp	r3, #21
 8004e3c:	d8f6      	bhi.n	8004e2c <_printf_i+0x28>
 8004e3e:	a101      	add	r1, pc, #4	; (adr r1, 8004e44 <_printf_i+0x40>)
 8004e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004e2d 	.word	0x08004e2d
 8004e50:	08004e2d 	.word	0x08004e2d
 8004e54:	08004e2d 	.word	0x08004e2d
 8004e58:	08004e2d 	.word	0x08004e2d
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004e2d 	.word	0x08004e2d
 8004e64:	08004e2d 	.word	0x08004e2d
 8004e68:	08004e2d 	.word	0x08004e2d
 8004e6c:	08004e2d 	.word	0x08004e2d
 8004e70:	08004fbf 	.word	0x08004fbf
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004fa1 	.word	0x08004fa1
 8004e7c:	08004e2d 	.word	0x08004e2d
 8004e80:	08004e2d 	.word	0x08004e2d
 8004e84:	08004fe1 	.word	0x08004fe1
 8004e88:	08004e2d 	.word	0x08004e2d
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08004e2d 	.word	0x08004e2d
 8004e94:	08004e2d 	.word	0x08004e2d
 8004e98:	08004fa9 	.word	0x08004fa9
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	602a      	str	r2, [r5, #0]
 8004ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0a4      	b.n	8004ffa <_printf_i+0x1f6>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	6829      	ldr	r1, [r5, #0]
 8004eb4:	0606      	lsls	r6, r0, #24
 8004eb6:	f101 0304 	add.w	r3, r1, #4
 8004eba:	d50a      	bpl.n	8004ed2 <_printf_i+0xce>
 8004ebc:	680e      	ldr	r6, [r1, #0]
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	2e00      	cmp	r6, #0
 8004ec2:	da03      	bge.n	8004ecc <_printf_i+0xc8>
 8004ec4:	232d      	movs	r3, #45	; 0x2d
 8004ec6:	4276      	negs	r6, r6
 8004ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ecc:	230a      	movs	r3, #10
 8004ece:	485e      	ldr	r0, [pc, #376]	; (8005048 <_printf_i+0x244>)
 8004ed0:	e019      	b.n	8004f06 <_printf_i+0x102>
 8004ed2:	680e      	ldr	r6, [r1, #0]
 8004ed4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	bf18      	it	ne
 8004edc:	b236      	sxthne	r6, r6
 8004ede:	e7ef      	b.n	8004ec0 <_printf_i+0xbc>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	1d19      	adds	r1, r3, #4
 8004ee6:	6029      	str	r1, [r5, #0]
 8004ee8:	0601      	lsls	r1, r0, #24
 8004eea:	d501      	bpl.n	8004ef0 <_printf_i+0xec>
 8004eec:	681e      	ldr	r6, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <_printf_i+0xf2>
 8004ef0:	0646      	lsls	r6, r0, #25
 8004ef2:	d5fb      	bpl.n	8004eec <_printf_i+0xe8>
 8004ef4:	881e      	ldrh	r6, [r3, #0]
 8004ef6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef8:	bf0c      	ite	eq
 8004efa:	2308      	moveq	r3, #8
 8004efc:	230a      	movne	r3, #10
 8004efe:	4852      	ldr	r0, [pc, #328]	; (8005048 <_printf_i+0x244>)
 8004f00:	2100      	movs	r1, #0
 8004f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f06:	6865      	ldr	r5, [r4, #4]
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	bfa8      	it	ge
 8004f0c:	6821      	ldrge	r1, [r4, #0]
 8004f0e:	60a5      	str	r5, [r4, #8]
 8004f10:	bfa4      	itt	ge
 8004f12:	f021 0104 	bicge.w	r1, r1, #4
 8004f16:	6021      	strge	r1, [r4, #0]
 8004f18:	b90e      	cbnz	r6, 8004f1e <_printf_i+0x11a>
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	d04d      	beq.n	8004fba <_printf_i+0x1b6>
 8004f1e:	4615      	mov	r5, r2
 8004f20:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f24:	fb03 6711 	mls	r7, r3, r1, r6
 8004f28:	5dc7      	ldrb	r7, [r0, r7]
 8004f2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f2e:	4637      	mov	r7, r6
 8004f30:	42bb      	cmp	r3, r7
 8004f32:	460e      	mov	r6, r1
 8004f34:	d9f4      	bls.n	8004f20 <_printf_i+0x11c>
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d10b      	bne.n	8004f52 <_printf_i+0x14e>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	07de      	lsls	r6, r3, #31
 8004f3e:	d508      	bpl.n	8004f52 <_printf_i+0x14e>
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	6861      	ldr	r1, [r4, #4]
 8004f44:	4299      	cmp	r1, r3
 8004f46:	bfde      	ittt	le
 8004f48:	2330      	movle	r3, #48	; 0x30
 8004f4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f52:	1b52      	subs	r2, r2, r5
 8004f54:	6122      	str	r2, [r4, #16]
 8004f56:	464b      	mov	r3, r9
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f8cd a000 	str.w	sl, [sp]
 8004f60:	aa03      	add	r2, sp, #12
 8004f62:	f7ff fedf 	bl	8004d24 <_printf_common>
 8004f66:	3001      	adds	r0, #1
 8004f68:	d14c      	bne.n	8005004 <_printf_i+0x200>
 8004f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f6e:	b004      	add	sp, #16
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f74:	4834      	ldr	r0, [pc, #208]	; (8005048 <_printf_i+0x244>)
 8004f76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f7a:	6829      	ldr	r1, [r5, #0]
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f82:	6029      	str	r1, [r5, #0]
 8004f84:	061d      	lsls	r5, r3, #24
 8004f86:	d514      	bpl.n	8004fb2 <_printf_i+0x1ae>
 8004f88:	07df      	lsls	r7, r3, #31
 8004f8a:	bf44      	itt	mi
 8004f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f90:	6023      	strmi	r3, [r4, #0]
 8004f92:	b91e      	cbnz	r6, 8004f9c <_printf_i+0x198>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	f023 0320 	bic.w	r3, r3, #32
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	e7af      	b.n	8004f00 <_printf_i+0xfc>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	f043 0320 	orr.w	r3, r3, #32
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	2378      	movs	r3, #120	; 0x78
 8004faa:	4828      	ldr	r0, [pc, #160]	; (800504c <_printf_i+0x248>)
 8004fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fb0:	e7e3      	b.n	8004f7a <_printf_i+0x176>
 8004fb2:	0659      	lsls	r1, r3, #25
 8004fb4:	bf48      	it	mi
 8004fb6:	b2b6      	uxthmi	r6, r6
 8004fb8:	e7e6      	b.n	8004f88 <_printf_i+0x184>
 8004fba:	4615      	mov	r5, r2
 8004fbc:	e7bb      	b.n	8004f36 <_printf_i+0x132>
 8004fbe:	682b      	ldr	r3, [r5, #0]
 8004fc0:	6826      	ldr	r6, [r4, #0]
 8004fc2:	1d18      	adds	r0, r3, #4
 8004fc4:	6961      	ldr	r1, [r4, #20]
 8004fc6:	6028      	str	r0, [r5, #0]
 8004fc8:	0635      	lsls	r5, r6, #24
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	d501      	bpl.n	8004fd2 <_printf_i+0x1ce>
 8004fce:	6019      	str	r1, [r3, #0]
 8004fd0:	e002      	b.n	8004fd8 <_printf_i+0x1d4>
 8004fd2:	0670      	lsls	r0, r6, #25
 8004fd4:	d5fb      	bpl.n	8004fce <_printf_i+0x1ca>
 8004fd6:	8019      	strh	r1, [r3, #0]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	4615      	mov	r5, r2
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	e7ba      	b.n	8004f56 <_printf_i+0x152>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	1d1a      	adds	r2, r3, #4
 8004fe6:	602a      	str	r2, [r5, #0]
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f82f 	bl	8005050 <memchr>
 8004ff2:	b108      	cbz	r0, 8004ff8 <_printf_i+0x1f4>
 8004ff4:	1b40      	subs	r0, r0, r5
 8004ff6:	6060      	str	r0, [r4, #4]
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005002:	e7a8      	b.n	8004f56 <_printf_i+0x152>
 8005004:	462a      	mov	r2, r5
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	47d0      	blx	sl
 800500e:	3001      	adds	r0, #1
 8005010:	d0ab      	beq.n	8004f6a <_printf_i+0x166>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	079b      	lsls	r3, r3, #30
 8005016:	d413      	bmi.n	8005040 <_printf_i+0x23c>
 8005018:	68e0      	ldr	r0, [r4, #12]
 800501a:	9b03      	ldr	r3, [sp, #12]
 800501c:	4298      	cmp	r0, r3
 800501e:	bfb8      	it	lt
 8005020:	4618      	movlt	r0, r3
 8005022:	e7a4      	b.n	8004f6e <_printf_i+0x16a>
 8005024:	2301      	movs	r3, #1
 8005026:	4632      	mov	r2, r6
 8005028:	4649      	mov	r1, r9
 800502a:	4640      	mov	r0, r8
 800502c:	47d0      	blx	sl
 800502e:	3001      	adds	r0, #1
 8005030:	d09b      	beq.n	8004f6a <_printf_i+0x166>
 8005032:	3501      	adds	r5, #1
 8005034:	68e3      	ldr	r3, [r4, #12]
 8005036:	9903      	ldr	r1, [sp, #12]
 8005038:	1a5b      	subs	r3, r3, r1
 800503a:	42ab      	cmp	r3, r5
 800503c:	dcf2      	bgt.n	8005024 <_printf_i+0x220>
 800503e:	e7eb      	b.n	8005018 <_printf_i+0x214>
 8005040:	2500      	movs	r5, #0
 8005042:	f104 0619 	add.w	r6, r4, #25
 8005046:	e7f5      	b.n	8005034 <_printf_i+0x230>
 8005048:	08005995 	.word	0x08005995
 800504c:	080059a6 	.word	0x080059a6

08005050 <memchr>:
 8005050:	4603      	mov	r3, r0
 8005052:	b510      	push	{r4, lr}
 8005054:	b2c9      	uxtb	r1, r1
 8005056:	4402      	add	r2, r0
 8005058:	4293      	cmp	r3, r2
 800505a:	4618      	mov	r0, r3
 800505c:	d101      	bne.n	8005062 <memchr+0x12>
 800505e:	2000      	movs	r0, #0
 8005060:	e003      	b.n	800506a <memchr+0x1a>
 8005062:	7804      	ldrb	r4, [r0, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	428c      	cmp	r4, r1
 8005068:	d1f6      	bne.n	8005058 <memchr+0x8>
 800506a:	bd10      	pop	{r4, pc}

0800506c <memcpy>:
 800506c:	440a      	add	r2, r1
 800506e:	4291      	cmp	r1, r2
 8005070:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005074:	d100      	bne.n	8005078 <memcpy+0xc>
 8005076:	4770      	bx	lr
 8005078:	b510      	push	{r4, lr}
 800507a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507e:	4291      	cmp	r1, r2
 8005080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005084:	d1f9      	bne.n	800507a <memcpy+0xe>
 8005086:	bd10      	pop	{r4, pc}

08005088 <memmove>:
 8005088:	4288      	cmp	r0, r1
 800508a:	b510      	push	{r4, lr}
 800508c:	eb01 0402 	add.w	r4, r1, r2
 8005090:	d902      	bls.n	8005098 <memmove+0x10>
 8005092:	4284      	cmp	r4, r0
 8005094:	4623      	mov	r3, r4
 8005096:	d807      	bhi.n	80050a8 <memmove+0x20>
 8005098:	1e43      	subs	r3, r0, #1
 800509a:	42a1      	cmp	r1, r4
 800509c:	d008      	beq.n	80050b0 <memmove+0x28>
 800509e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050a6:	e7f8      	b.n	800509a <memmove+0x12>
 80050a8:	4601      	mov	r1, r0
 80050aa:	4402      	add	r2, r0
 80050ac:	428a      	cmp	r2, r1
 80050ae:	d100      	bne.n	80050b2 <memmove+0x2a>
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ba:	e7f7      	b.n	80050ac <memmove+0x24>

080050bc <_free_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4605      	mov	r5, r0
 80050c0:	2900      	cmp	r1, #0
 80050c2:	d040      	beq.n	8005146 <_free_r+0x8a>
 80050c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c8:	1f0c      	subs	r4, r1, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfb8      	it	lt
 80050ce:	18e4      	addlt	r4, r4, r3
 80050d0:	f000 f910 	bl	80052f4 <__malloc_lock>
 80050d4:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <_free_r+0x8c>)
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	b933      	cbnz	r3, 80050e8 <_free_r+0x2c>
 80050da:	6063      	str	r3, [r4, #4]
 80050dc:	6014      	str	r4, [r2, #0]
 80050de:	4628      	mov	r0, r5
 80050e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e4:	f000 b90c 	b.w	8005300 <__malloc_unlock>
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d908      	bls.n	80050fe <_free_r+0x42>
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	1821      	adds	r1, r4, r0
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf01      	itttt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	1809      	addeq	r1, r1, r0
 80050fa:	6021      	streq	r1, [r4, #0]
 80050fc:	e7ed      	b.n	80050da <_free_r+0x1e>
 80050fe:	461a      	mov	r2, r3
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	b10b      	cbz	r3, 8005108 <_free_r+0x4c>
 8005104:	42a3      	cmp	r3, r4
 8005106:	d9fa      	bls.n	80050fe <_free_r+0x42>
 8005108:	6811      	ldr	r1, [r2, #0]
 800510a:	1850      	adds	r0, r2, r1
 800510c:	42a0      	cmp	r0, r4
 800510e:	d10b      	bne.n	8005128 <_free_r+0x6c>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	4401      	add	r1, r0
 8005114:	1850      	adds	r0, r2, r1
 8005116:	4283      	cmp	r3, r0
 8005118:	6011      	str	r1, [r2, #0]
 800511a:	d1e0      	bne.n	80050de <_free_r+0x22>
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4401      	add	r1, r0
 8005122:	6011      	str	r1, [r2, #0]
 8005124:	6053      	str	r3, [r2, #4]
 8005126:	e7da      	b.n	80050de <_free_r+0x22>
 8005128:	d902      	bls.n	8005130 <_free_r+0x74>
 800512a:	230c      	movs	r3, #12
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	e7d6      	b.n	80050de <_free_r+0x22>
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	1821      	adds	r1, r4, r0
 8005134:	428b      	cmp	r3, r1
 8005136:	bf01      	itttt	eq
 8005138:	6819      	ldreq	r1, [r3, #0]
 800513a:	685b      	ldreq	r3, [r3, #4]
 800513c:	1809      	addeq	r1, r1, r0
 800513e:	6021      	streq	r1, [r4, #0]
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	6054      	str	r4, [r2, #4]
 8005144:	e7cb      	b.n	80050de <_free_r+0x22>
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	2000027c 	.word	0x2000027c

0800514c <sbrk_aligned>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4e0e      	ldr	r6, [pc, #56]	; (8005188 <sbrk_aligned+0x3c>)
 8005150:	460c      	mov	r4, r1
 8005152:	6831      	ldr	r1, [r6, #0]
 8005154:	4605      	mov	r5, r0
 8005156:	b911      	cbnz	r1, 800515e <sbrk_aligned+0x12>
 8005158:	f000 f8bc 	bl	80052d4 <_sbrk_r>
 800515c:	6030      	str	r0, [r6, #0]
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f000 f8b7 	bl	80052d4 <_sbrk_r>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d00a      	beq.n	8005180 <sbrk_aligned+0x34>
 800516a:	1cc4      	adds	r4, r0, #3
 800516c:	f024 0403 	bic.w	r4, r4, #3
 8005170:	42a0      	cmp	r0, r4
 8005172:	d007      	beq.n	8005184 <sbrk_aligned+0x38>
 8005174:	1a21      	subs	r1, r4, r0
 8005176:	4628      	mov	r0, r5
 8005178:	f000 f8ac 	bl	80052d4 <_sbrk_r>
 800517c:	3001      	adds	r0, #1
 800517e:	d101      	bne.n	8005184 <sbrk_aligned+0x38>
 8005180:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005184:	4620      	mov	r0, r4
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	20000280 	.word	0x20000280

0800518c <_malloc_r>:
 800518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	1ccd      	adds	r5, r1, #3
 8005192:	f025 0503 	bic.w	r5, r5, #3
 8005196:	3508      	adds	r5, #8
 8005198:	2d0c      	cmp	r5, #12
 800519a:	bf38      	it	cc
 800519c:	250c      	movcc	r5, #12
 800519e:	2d00      	cmp	r5, #0
 80051a0:	4607      	mov	r7, r0
 80051a2:	db01      	blt.n	80051a8 <_malloc_r+0x1c>
 80051a4:	42a9      	cmp	r1, r5
 80051a6:	d905      	bls.n	80051b4 <_malloc_r+0x28>
 80051a8:	230c      	movs	r3, #12
 80051aa:	2600      	movs	r6, #0
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	4630      	mov	r0, r6
 80051b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b4:	4e2e      	ldr	r6, [pc, #184]	; (8005270 <_malloc_r+0xe4>)
 80051b6:	f000 f89d 	bl	80052f4 <__malloc_lock>
 80051ba:	6833      	ldr	r3, [r6, #0]
 80051bc:	461c      	mov	r4, r3
 80051be:	bb34      	cbnz	r4, 800520e <_malloc_r+0x82>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4638      	mov	r0, r7
 80051c4:	f7ff ffc2 	bl	800514c <sbrk_aligned>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	4604      	mov	r4, r0
 80051cc:	d14d      	bne.n	800526a <_malloc_r+0xde>
 80051ce:	6834      	ldr	r4, [r6, #0]
 80051d0:	4626      	mov	r6, r4
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	d140      	bne.n	8005258 <_malloc_r+0xcc>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	4631      	mov	r1, r6
 80051da:	4638      	mov	r0, r7
 80051dc:	eb04 0803 	add.w	r8, r4, r3
 80051e0:	f000 f878 	bl	80052d4 <_sbrk_r>
 80051e4:	4580      	cmp	r8, r0
 80051e6:	d13a      	bne.n	800525e <_malloc_r+0xd2>
 80051e8:	6821      	ldr	r1, [r4, #0]
 80051ea:	3503      	adds	r5, #3
 80051ec:	1a6d      	subs	r5, r5, r1
 80051ee:	f025 0503 	bic.w	r5, r5, #3
 80051f2:	3508      	adds	r5, #8
 80051f4:	2d0c      	cmp	r5, #12
 80051f6:	bf38      	it	cc
 80051f8:	250c      	movcc	r5, #12
 80051fa:	4638      	mov	r0, r7
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7ff ffa5 	bl	800514c <sbrk_aligned>
 8005202:	3001      	adds	r0, #1
 8005204:	d02b      	beq.n	800525e <_malloc_r+0xd2>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	442b      	add	r3, r5
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	e00e      	b.n	800522c <_malloc_r+0xa0>
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	1b52      	subs	r2, r2, r5
 8005212:	d41e      	bmi.n	8005252 <_malloc_r+0xc6>
 8005214:	2a0b      	cmp	r2, #11
 8005216:	d916      	bls.n	8005246 <_malloc_r+0xba>
 8005218:	1961      	adds	r1, r4, r5
 800521a:	42a3      	cmp	r3, r4
 800521c:	6025      	str	r5, [r4, #0]
 800521e:	bf18      	it	ne
 8005220:	6059      	strne	r1, [r3, #4]
 8005222:	6863      	ldr	r3, [r4, #4]
 8005224:	bf08      	it	eq
 8005226:	6031      	streq	r1, [r6, #0]
 8005228:	5162      	str	r2, [r4, r5]
 800522a:	604b      	str	r3, [r1, #4]
 800522c:	4638      	mov	r0, r7
 800522e:	f104 060b 	add.w	r6, r4, #11
 8005232:	f000 f865 	bl	8005300 <__malloc_unlock>
 8005236:	f026 0607 	bic.w	r6, r6, #7
 800523a:	1d23      	adds	r3, r4, #4
 800523c:	1af2      	subs	r2, r6, r3
 800523e:	d0b6      	beq.n	80051ae <_malloc_r+0x22>
 8005240:	1b9b      	subs	r3, r3, r6
 8005242:	50a3      	str	r3, [r4, r2]
 8005244:	e7b3      	b.n	80051ae <_malloc_r+0x22>
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	42a3      	cmp	r3, r4
 800524a:	bf0c      	ite	eq
 800524c:	6032      	streq	r2, [r6, #0]
 800524e:	605a      	strne	r2, [r3, #4]
 8005250:	e7ec      	b.n	800522c <_malloc_r+0xa0>
 8005252:	4623      	mov	r3, r4
 8005254:	6864      	ldr	r4, [r4, #4]
 8005256:	e7b2      	b.n	80051be <_malloc_r+0x32>
 8005258:	4634      	mov	r4, r6
 800525a:	6876      	ldr	r6, [r6, #4]
 800525c:	e7b9      	b.n	80051d2 <_malloc_r+0x46>
 800525e:	230c      	movs	r3, #12
 8005260:	4638      	mov	r0, r7
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	f000 f84c 	bl	8005300 <__malloc_unlock>
 8005268:	e7a1      	b.n	80051ae <_malloc_r+0x22>
 800526a:	6025      	str	r5, [r4, #0]
 800526c:	e7de      	b.n	800522c <_malloc_r+0xa0>
 800526e:	bf00      	nop
 8005270:	2000027c 	.word	0x2000027c

08005274 <_realloc_r>:
 8005274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005278:	4680      	mov	r8, r0
 800527a:	4614      	mov	r4, r2
 800527c:	460e      	mov	r6, r1
 800527e:	b921      	cbnz	r1, 800528a <_realloc_r+0x16>
 8005280:	4611      	mov	r1, r2
 8005282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	f7ff bf81 	b.w	800518c <_malloc_r>
 800528a:	b92a      	cbnz	r2, 8005298 <_realloc_r+0x24>
 800528c:	f7ff ff16 	bl	80050bc <_free_r>
 8005290:	4625      	mov	r5, r4
 8005292:	4628      	mov	r0, r5
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005298:	f000 f838 	bl	800530c <_malloc_usable_size_r>
 800529c:	4284      	cmp	r4, r0
 800529e:	4607      	mov	r7, r0
 80052a0:	d802      	bhi.n	80052a8 <_realloc_r+0x34>
 80052a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052a6:	d812      	bhi.n	80052ce <_realloc_r+0x5a>
 80052a8:	4621      	mov	r1, r4
 80052aa:	4640      	mov	r0, r8
 80052ac:	f7ff ff6e 	bl	800518c <_malloc_r>
 80052b0:	4605      	mov	r5, r0
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d0ed      	beq.n	8005292 <_realloc_r+0x1e>
 80052b6:	42bc      	cmp	r4, r7
 80052b8:	4622      	mov	r2, r4
 80052ba:	4631      	mov	r1, r6
 80052bc:	bf28      	it	cs
 80052be:	463a      	movcs	r2, r7
 80052c0:	f7ff fed4 	bl	800506c <memcpy>
 80052c4:	4631      	mov	r1, r6
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7ff fef8 	bl	80050bc <_free_r>
 80052cc:	e7e1      	b.n	8005292 <_realloc_r+0x1e>
 80052ce:	4635      	mov	r5, r6
 80052d0:	e7df      	b.n	8005292 <_realloc_r+0x1e>
	...

080052d4 <_sbrk_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	2300      	movs	r3, #0
 80052d8:	4d05      	ldr	r5, [pc, #20]	; (80052f0 <_sbrk_r+0x1c>)
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fc fa18 	bl	8001714 <_sbrk>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_sbrk_r+0x1a>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_sbrk_r+0x1a>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	20000284 	.word	0x20000284

080052f4 <__malloc_lock>:
 80052f4:	4801      	ldr	r0, [pc, #4]	; (80052fc <__malloc_lock+0x8>)
 80052f6:	f000 b811 	b.w	800531c <__retarget_lock_acquire_recursive>
 80052fa:	bf00      	nop
 80052fc:	20000288 	.word	0x20000288

08005300 <__malloc_unlock>:
 8005300:	4801      	ldr	r0, [pc, #4]	; (8005308 <__malloc_unlock+0x8>)
 8005302:	f000 b80c 	b.w	800531e <__retarget_lock_release_recursive>
 8005306:	bf00      	nop
 8005308:	20000288 	.word	0x20000288

0800530c <_malloc_usable_size_r>:
 800530c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005310:	1f18      	subs	r0, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfbc      	itt	lt
 8005316:	580b      	ldrlt	r3, [r1, r0]
 8005318:	18c0      	addlt	r0, r0, r3
 800531a:	4770      	bx	lr

0800531c <__retarget_lock_acquire_recursive>:
 800531c:	4770      	bx	lr

0800531e <__retarget_lock_release_recursive>:
 800531e:	4770      	bx	lr

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
