
transiverTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c08  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800340c  0800340c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800340c  0800340c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800340c  0800340c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000074  08003488  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003488  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081da  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa6  00000000  00000000  00028277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00029d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019378  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009343  00000000  00000000  00044100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009286a  00000000  00000000  0004d443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfcad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  000dfd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08002dd4 	.word	0x08002dd4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08002dd4 	.word	0x08002dd4

08000224 <CS_Select>:
#define NRF24_CSN_PORT   GPIOC
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	4802      	ldr	r0, [pc, #8]	; (8000238 <CS_Select+0x14>)
 800022e:	f001 faf2 	bl	8001816 <HAL_GPIO_WritePin>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40011000 	.word	0x40011000

0800023c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <CS_UnSelect+0x14>)
 8000246:	f001 fae6 	bl	8001816 <HAL_GPIO_WritePin>
}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40011000 	.word	0x40011000

08000254 <CE_Enable>:


void CE_Enable (void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2120      	movs	r1, #32
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <CE_Enable+0x14>)
 800025e:	f001 fada 	bl	8001816 <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40011000 	.word	0x40011000

0800026c <CE_Disable>:

void CE_Disable (void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2120      	movs	r1, #32
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <CE_Disable+0x14>)
 8000276:	f001 face 	bl	8001816 <HAL_GPIO_WritePin>
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40011000 	.word	0x40011000

08000284 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	b2db      	uxtb	r3, r3
 800029c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002a2:	f7ff ffbf 	bl	8000224 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002a6:	f107 010c 	add.w	r1, r7, #12
 80002aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ae:	2202      	movs	r2, #2
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <nrf24_WriteReg+0x40>)
 80002b2:	f001 ff57 	bl	8002164 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002b6:	f7ff ffc1 	bl	800023c <CS_UnSelect>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000090 	.word	0x20000090

080002c8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	f043 0320 	orr.w	r3, r3, #32
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002e0:	f7ff ffa0 	bl	8000224 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002e4:	f107 0114 	add.w	r1, r7, #20
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	2201      	movs	r2, #1
 80002ec:	4808      	ldr	r0, [pc, #32]	; (8000310 <nrf24_WriteRegMulti+0x48>)
 80002ee:	f001 ff39 	bl	8002164 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fa:	68b9      	ldr	r1, [r7, #8]
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <nrf24_WriteRegMulti+0x48>)
 80002fe:	f001 ff31 	bl	8002164 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000302:	f7ff ff9b 	bl	800023c <CS_UnSelect>
}
 8000306:	bf00      	nop
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000090 	.word	0x20000090

08000314 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000322:	f7ff ff7f 	bl	8000224 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000326:	1df9      	adds	r1, r7, #7
 8000328:	2364      	movs	r3, #100	; 0x64
 800032a:	2201      	movs	r2, #1
 800032c:	4808      	ldr	r0, [pc, #32]	; (8000350 <nrf24_ReadReg+0x3c>)
 800032e:	f001 ff19 	bl	8002164 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000332:	f107 010f 	add.w	r1, r7, #15
 8000336:	2364      	movs	r3, #100	; 0x64
 8000338:	2201      	movs	r2, #1
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <nrf24_ReadReg+0x3c>)
 800033c:	f002 f84e 	bl	80023dc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000340:	f7ff ff7c 	bl	800023c <CS_UnSelect>

	return data;
 8000344:	7bfb      	ldrb	r3, [r7, #15]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000090 	.word	0x20000090

08000354 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800035e:	f7ff ff61 	bl	8000224 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000362:	1df9      	adds	r1, r7, #7
 8000364:	2364      	movs	r3, #100	; 0x64
 8000366:	2201      	movs	r2, #1
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <nrfsendCmd+0x28>)
 800036a:	f001 fefb 	bl	8002164 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800036e:	f7ff ff65 	bl	800023c <CS_UnSelect>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000090 	.word	0x20000090

08000380 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b07      	cmp	r3, #7
 800038e:	d104      	bne.n	800039a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000390:	2100      	movs	r1, #0
 8000392:	2007      	movs	r0, #7
 8000394:	f7ff ff76 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000398:	e090      	b.n	80004bc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2b17      	cmp	r3, #23
 800039e:	d104      	bne.n	80003aa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003a0:	2111      	movs	r1, #17
 80003a2:	2017      	movs	r0, #23
 80003a4:	f7ff ff6e 	bl	8000284 <nrf24_WriteReg>
}
 80003a8:	e088      	b.n	80004bc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80003aa:	2108      	movs	r1, #8
 80003ac:	2000      	movs	r0, #0
 80003ae:	f7ff ff69 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80003b2:	213f      	movs	r1, #63	; 0x3f
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff ff65 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80003ba:	2103      	movs	r1, #3
 80003bc:	2002      	movs	r0, #2
 80003be:	f7ff ff61 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003c2:	2103      	movs	r1, #3
 80003c4:	2003      	movs	r0, #3
 80003c6:	f7ff ff5d 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003ca:	2103      	movs	r1, #3
 80003cc:	2004      	movs	r0, #4
 80003ce:	f7ff ff59 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003d2:	2102      	movs	r1, #2
 80003d4:	2005      	movs	r0, #5
 80003d6:	f7ff ff55 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003da:	210e      	movs	r1, #14
 80003dc:	2006      	movs	r0, #6
 80003de:	f7ff ff51 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80003e2:	2100      	movs	r1, #0
 80003e4:	2007      	movs	r0, #7
 80003e6:	f7ff ff4d 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80003ea:	2100      	movs	r1, #0
 80003ec:	2008      	movs	r0, #8
 80003ee:	f7ff ff49 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80003f2:	2100      	movs	r1, #0
 80003f4:	2009      	movs	r0, #9
 80003f6:	f7ff ff45 	bl	8000284 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003fa:	4a32      	ldr	r2, [pc, #200]	; (80004c4 <nrf24_reset+0x144>)
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000404:	6018      	str	r0, [r3, #0]
 8000406:	3304      	adds	r3, #4
 8000408:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	2205      	movs	r2, #5
 8000410:	4619      	mov	r1, r3
 8000412:	200a      	movs	r0, #10
 8000414:	f7ff ff58 	bl	80002c8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000418:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <nrf24_reset+0x148>)
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000422:	6018      	str	r0, [r3, #0]
 8000424:	3304      	adds	r3, #4
 8000426:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2205      	movs	r2, #5
 800042e:	4619      	mov	r1, r3
 8000430:	200b      	movs	r0, #11
 8000432:	f7ff ff49 	bl	80002c8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000436:	21c3      	movs	r1, #195	; 0xc3
 8000438:	200c      	movs	r0, #12
 800043a:	f7ff ff23 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800043e:	21c4      	movs	r1, #196	; 0xc4
 8000440:	200d      	movs	r0, #13
 8000442:	f7ff ff1f 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000446:	21c5      	movs	r1, #197	; 0xc5
 8000448:	200e      	movs	r0, #14
 800044a:	f7ff ff1b 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800044e:	21c6      	movs	r1, #198	; 0xc6
 8000450:	200f      	movs	r0, #15
 8000452:	f7ff ff17 	bl	8000284 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000456:	4a1b      	ldr	r2, [pc, #108]	; (80004c4 <nrf24_reset+0x144>)
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000460:	6018      	str	r0, [r3, #0]
 8000462:	3304      	adds	r3, #4
 8000464:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000466:	f107 0308 	add.w	r3, r7, #8
 800046a:	2205      	movs	r2, #5
 800046c:	4619      	mov	r1, r3
 800046e:	2010      	movs	r0, #16
 8000470:	f7ff ff2a 	bl	80002c8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000474:	2100      	movs	r1, #0
 8000476:	2011      	movs	r0, #17
 8000478:	f7ff ff04 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	2012      	movs	r0, #18
 8000480:	f7ff ff00 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2013      	movs	r0, #19
 8000488:	f7ff fefc 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800048c:	2100      	movs	r1, #0
 800048e:	2014      	movs	r0, #20
 8000490:	f7ff fef8 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000494:	2100      	movs	r1, #0
 8000496:	2015      	movs	r0, #21
 8000498:	f7ff fef4 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800049c:	2100      	movs	r1, #0
 800049e:	2016      	movs	r0, #22
 80004a0:	f7ff fef0 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004a4:	2111      	movs	r1, #17
 80004a6:	2017      	movs	r0, #23
 80004a8:	f7ff feec 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004ac:	2100      	movs	r1, #0
 80004ae:	201c      	movs	r0, #28
 80004b0:	f7ff fee8 	bl	8000284 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80004b4:	2100      	movs	r1, #0
 80004b6:	201d      	movs	r0, #29
 80004b8:	f7ff fee4 	bl	8000284 <nrf24_WriteReg>
}
 80004bc:	bf00      	nop
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	08002dec 	.word	0x08002dec
 80004c8:	08002df4 	.word	0x08002df4

080004cc <NRF24_Init>:




void NRF24_Init (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80004d0:	f7ff fecc 	bl	800026c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ff53 	bl	8000380 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80004da:	2100      	movs	r1, #0
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff fed1 	bl	8000284 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80004e2:	2100      	movs	r1, #0
 80004e4:	2001      	movs	r0, #1
 80004e6:	f7ff fecd 	bl	8000284 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80004ea:	2100      	movs	r1, #0
 80004ec:	2002      	movs	r0, #2
 80004ee:	f7ff fec9 	bl	8000284 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80004f2:	2103      	movs	r1, #3
 80004f4:	2003      	movs	r0, #3
 80004f6:	f7ff fec5 	bl	8000284 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80004fa:	2100      	movs	r1, #0
 80004fc:	2004      	movs	r0, #4
 80004fe:	f7ff fec1 	bl	8000284 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000502:	2100      	movs	r1, #0
 8000504:	2005      	movs	r0, #5
 8000506:	f7ff febd 	bl	8000284 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800050a:	210e      	movs	r1, #14
 800050c:	2006      	movs	r0, #6
 800050e:	f7ff feb9 	bl	8000284 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000512:	f7ff fe9f 	bl	8000254 <CE_Enable>

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}

0800051a <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	460b      	mov	r3, r1
 8000524:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000526:	f7ff fea1 	bl	800026c <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800052a:	78fb      	ldrb	r3, [r7, #3]
 800052c:	4619      	mov	r1, r3
 800052e:	2005      	movs	r0, #5
 8000530:	f7ff fea8 	bl	8000284 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000534:	2205      	movs	r2, #5
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	2010      	movs	r0, #16
 800053a:	f7ff fec5 	bl	80002c8 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff fee8 	bl	8000314 <nrf24_ReadReg>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	73fb      	strb	r3, [r7, #15]
//	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4619      	mov	r1, r3
 8000554:	2000      	movs	r0, #0
 8000556:	f7ff fe95 	bl	8000284 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800055a:	f7ff fe7b 	bl	8000254 <CE_Enable>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 8000574:	f7ff fe56 	bl	8000224 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8000578:	23a0      	movs	r3, #160	; 0xa0
 800057a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800057c:	f107 010e 	add.w	r1, r7, #14
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	2201      	movs	r2, #1
 8000584:	4816      	ldr	r0, [pc, #88]	; (80005e0 <NRF24_Transmit+0x78>)
 8000586:	f001 fded 	bl	8002164 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	2220      	movs	r2, #32
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	4813      	ldr	r0, [pc, #76]	; (80005e0 <NRF24_Transmit+0x78>)
 8000594:	f001 fde6 	bl	8002164 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8000598:	f7ff fe50 	bl	800023c <CS_UnSelect>

	HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fe5d 	bl	800125c <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80005a2:	2017      	movs	r0, #23
 80005a4:	f7ff feb6 	bl	8000314 <nrf24_ReadReg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00f      	beq.n	80005d6 <NRF24_Transmit+0x6e>
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	f003 0308 	and.w	r3, r3, #8
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d10a      	bne.n	80005d6 <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 80005c0:	23e1      	movs	r3, #225	; 0xe1
 80005c2:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fec4 	bl	8000354 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 80005cc:	2017      	movs	r0, #23
 80005ce:	f7ff fed7 	bl	8000380 <nrf24_reset>

		return 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <NRF24_Transmit+0x70>
	}

	return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000090 	.word	0x20000090

080005e4 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	e002      	b.n	80005f4 <Delay+0x10>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f9      	bne.n	80005ee <Delay+0xa>
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800060c:	2001      	movs	r0, #1
 800060e:	f000 f829 	bl	8000664 <LCD_BackLed_Control>
	LCD_Rst();
 8000612:	f000 f80f 	bl	8000634 <LCD_Rst>
	LCD_REG_Config();
 8000616:	f000 f85f 	bl	80006d8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000624:	22f0      	movs	r2, #240	; 0xf0
 8000626:	2100      	movs	r1, #0
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f9e6 	bl	80009fa <LCD_Clear>
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <LCD_Rst+0x28>)
 800063e:	f001 f8ea 	bl	8001816 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <LCD_Rst+0x2c>)
 8000644:	f7ff ffce 	bl	80005e4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2102      	movs	r1, #2
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <LCD_Rst+0x28>)
 800064e:	f001 f8e2 	bl	8001816 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <LCD_Rst+0x2c>)
 8000654:	f7ff ffc6 	bl	80005e4 <Delay>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40011800 	.word	0x40011800
 8000660:	0002bffc 	.word	0x0002bffc

08000664 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d006      	beq.n	8000682 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <LCD_BackLed_Control+0x34>)
 800067c:	f001 f8cb 	bl	8001816 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000680:	e005      	b.n	800068e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <LCD_BackLed_Control+0x34>)
 800068a:	f001 f8c4 	bl	8001816 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40011400 	.word	0x40011400

0800069c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80006a6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	8013      	strh	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80006c2:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <LCD_Write_Data+0x1c>)
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	8013      	strh	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	60020000 	.word	0x60020000

080006d8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80006dc:	20cf      	movs	r0, #207	; 0xcf
 80006de:	f7ff ffdd 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff ffe8 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80006e8:	2081      	movs	r0, #129	; 0x81
 80006ea:	f7ff ffe5 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80006ee:	2030      	movs	r0, #48	; 0x30
 80006f0:	f7ff ffe2 	bl	80006b8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80006f4:	20ed      	movs	r0, #237	; 0xed
 80006f6:	f7ff ffd1 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f7ff ffdc 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000700:	2003      	movs	r0, #3
 8000702:	f7ff ffd9 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000706:	2012      	movs	r0, #18
 8000708:	f7ff ffd6 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800070c:	2081      	movs	r0, #129	; 0x81
 800070e:	f7ff ffd3 	bl	80006b8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000712:	20e8      	movs	r0, #232	; 0xe8
 8000714:	f7ff ffc2 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000718:	2085      	movs	r0, #133	; 0x85
 800071a:	f7ff ffcd 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800071e:	2010      	movs	r0, #16
 8000720:	f7ff ffca 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000724:	2078      	movs	r0, #120	; 0x78
 8000726:	f7ff ffc7 	bl	80006b8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800072a:	20cb      	movs	r0, #203	; 0xcb
 800072c:	f7ff ffb6 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000730:	2039      	movs	r0, #57	; 0x39
 8000732:	f7ff ffc1 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000736:	202c      	movs	r0, #44	; 0x2c
 8000738:	f7ff ffbe 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff ffbb 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000742:	2034      	movs	r0, #52	; 0x34
 8000744:	f7ff ffb8 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ffb5 	bl	80006b8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800074e:	20f7      	movs	r0, #247	; 0xf7
 8000750:	f7ff ffa4 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000754:	2020      	movs	r0, #32
 8000756:	f7ff ffaf 	bl	80006b8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800075a:	20ea      	movs	r0, #234	; 0xea
 800075c:	f7ff ff9e 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ffa9 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ffa6 	bl	80006b8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800076c:	20b1      	movs	r0, #177	; 0xb1
 800076e:	f7ff ff95 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ffa0 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000778:	201b      	movs	r0, #27
 800077a:	f7ff ff9d 	bl	80006b8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800077e:	20b6      	movs	r0, #182	; 0xb6
 8000780:	f7ff ff8c 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000784:	200a      	movs	r0, #10
 8000786:	f7ff ff97 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800078a:	20a2      	movs	r0, #162	; 0xa2
 800078c:	f7ff ff94 	bl	80006b8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000790:	20c0      	movs	r0, #192	; 0xc0
 8000792:	f7ff ff83 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000796:	2035      	movs	r0, #53	; 0x35
 8000798:	f7ff ff8e 	bl	80006b8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800079c:	20c1      	movs	r0, #193	; 0xc1
 800079e:	f7ff ff7d 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80007a2:	2011      	movs	r0, #17
 80007a4:	f7ff ff88 	bl	80006b8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80007a8:	20c5      	movs	r0, #197	; 0xc5
 80007aa:	f7ff ff77 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80007ae:	2045      	movs	r0, #69	; 0x45
 80007b0:	f7ff ff82 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80007b4:	2045      	movs	r0, #69	; 0x45
 80007b6:	f7ff ff7f 	bl	80006b8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80007ba:	20c7      	movs	r0, #199	; 0xc7
 80007bc:	f7ff ff6e 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80007c0:	20a2      	movs	r0, #162	; 0xa2
 80007c2:	f7ff ff79 	bl	80006b8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80007c6:	20f2      	movs	r0, #242	; 0xf2
 80007c8:	f7ff ff68 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff73 	bl	80006b8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80007d2:	2026      	movs	r0, #38	; 0x26
 80007d4:	f7ff ff62 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ff6d 	bl	80006b8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80007de:	20e0      	movs	r0, #224	; 0xe0
 80007e0:	f7ff ff5c 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80007e4:	200f      	movs	r0, #15
 80007e6:	f7ff ff67 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80007ea:	2026      	movs	r0, #38	; 0x26
 80007ec:	f7ff ff64 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80007f0:	2024      	movs	r0, #36	; 0x24
 80007f2:	f7ff ff61 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80007f6:	200b      	movs	r0, #11
 80007f8:	f7ff ff5e 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80007fc:	200e      	movs	r0, #14
 80007fe:	f7ff ff5b 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000802:	2009      	movs	r0, #9
 8000804:	f7ff ff58 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000808:	2054      	movs	r0, #84	; 0x54
 800080a:	f7ff ff55 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800080e:	20a8      	movs	r0, #168	; 0xa8
 8000810:	f7ff ff52 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000814:	2046      	movs	r0, #70	; 0x46
 8000816:	f7ff ff4f 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800081a:	200c      	movs	r0, #12
 800081c:	f7ff ff4c 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000820:	2017      	movs	r0, #23
 8000822:	f7ff ff49 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000826:	2009      	movs	r0, #9
 8000828:	f7ff ff46 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800082c:	200f      	movs	r0, #15
 800082e:	f7ff ff43 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000832:	2007      	movs	r0, #7
 8000834:	f7ff ff40 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ff3d 	bl	80006b8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800083e:	20e1      	movs	r0, #225	; 0xe1
 8000840:	f7ff ff2c 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ff37 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800084a:	2019      	movs	r0, #25
 800084c:	f7ff ff34 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000850:	201b      	movs	r0, #27
 8000852:	f7ff ff31 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000856:	2004      	movs	r0, #4
 8000858:	f7ff ff2e 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800085c:	2010      	movs	r0, #16
 800085e:	f7ff ff2b 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000862:	2007      	movs	r0, #7
 8000864:	f7ff ff28 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000868:	202a      	movs	r0, #42	; 0x2a
 800086a:	f7ff ff25 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800086e:	2047      	movs	r0, #71	; 0x47
 8000870:	f7ff ff22 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000874:	2039      	movs	r0, #57	; 0x39
 8000876:	f7ff ff1f 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800087a:	2003      	movs	r0, #3
 800087c:	f7ff ff1c 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000880:	2006      	movs	r0, #6
 8000882:	f7ff ff19 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff16 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800088c:	2030      	movs	r0, #48	; 0x30
 800088e:	f7ff ff13 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000892:	2038      	movs	r0, #56	; 0x38
 8000894:	f7ff ff10 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000898:	200f      	movs	r0, #15
 800089a:	f7ff ff0d 	bl	80006b8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800089e:	2036      	movs	r0, #54	; 0x36
 80008a0:	f7ff fefc 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80008a4:	20c8      	movs	r0, #200	; 0xc8
 80008a6:	f7ff ff07 	bl	80006b8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80008aa:	202a      	movs	r0, #42	; 0x2a
 80008ac:	f7ff fef6 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ff01 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fefe 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fefb 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80008c2:	20ef      	movs	r0, #239	; 0xef
 80008c4:	f7ff fef8 	bl	80006b8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80008c8:	202b      	movs	r0, #43	; 0x2b
 80008ca:	f7ff fee7 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff fef2 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff feef 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff feec 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80008e0:	203f      	movs	r0, #63	; 0x3f
 80008e2:	f7ff fee9 	bl	80006b8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80008e6:	203a      	movs	r0, #58	; 0x3a
 80008e8:	f7ff fed8 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80008ec:	2055      	movs	r0, #85	; 0x55
 80008ee:	f7ff fee3 	bl	80006b8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80008f2:	2011      	movs	r0, #17
 80008f4:	f7ff fed2 	bl	800069c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <LCD_REG_Config+0x230>)
 80008fa:	f7ff fe73 	bl	80005e4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80008fe:	2029      	movs	r0, #41	; 0x29
 8000900:	f7ff fecc 	bl	800069c <LCD_Write_Cmd>
	
	
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	0002bffc 	.word	0x0002bffc

0800090c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4604      	mov	r4, r0
 8000914:	4608      	mov	r0, r1
 8000916:	4611      	mov	r1, r2
 8000918:	461a      	mov	r2, r3
 800091a:	4623      	mov	r3, r4
 800091c:	80fb      	strh	r3, [r7, #6]
 800091e:	4603      	mov	r3, r0
 8000920:	80bb      	strh	r3, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	807b      	strh	r3, [r7, #2]
 8000926:	4613      	mov	r3, r2
 8000928:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800092a:	202a      	movs	r0, #42	; 0x2a
 800092c:	f7ff feb6 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	0a1b      	lsrs	r3, r3, #8
 8000934:	b29b      	uxth	r3, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff febe 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	b29b      	uxth	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff feb8 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000948:	88fa      	ldrh	r2, [r7, #6]
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	4413      	add	r3, r2
 800094e:	3b01      	subs	r3, #1
 8000950:	121b      	asrs	r3, r3, #8
 8000952:	b29b      	uxth	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff feaf 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800095a:	88fa      	ldrh	r2, [r7, #6]
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	4413      	add	r3, r2
 8000960:	b29b      	uxth	r3, r3
 8000962:	3b01      	subs	r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	b29b      	uxth	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fea4 	bl	80006b8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000970:	202b      	movs	r0, #43	; 0x2b
 8000972:	f7ff fe93 	bl	800069c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29b      	uxth	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe9b 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	b29b      	uxth	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe95 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800098e:	88ba      	ldrh	r2, [r7, #4]
 8000990:	883b      	ldrh	r3, [r7, #0]
 8000992:	4413      	add	r3, r2
 8000994:	3b01      	subs	r3, #1
 8000996:	121b      	asrs	r3, r3, #8
 8000998:	b29b      	uxth	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe8c 	bl	80006b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80009a0:	88ba      	ldrh	r2, [r7, #4]
 80009a2:	883b      	ldrh	r3, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	3b01      	subs	r3, #1
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe81 	bl	80006b8 <LCD_Write_Data>
	
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd90      	pop	{r4, r7, pc}

080009be <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80009ce:	202c      	movs	r0, #44	; 0x2c
 80009d0:	f7ff fe64 	bl	800069c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	e006      	b.n	80009e8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe6b 	bl	80006b8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3f4      	bcc.n	80009da <LCD_FillColor+0x1c>
		
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80009fa:	b590      	push	{r4, r7, lr}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4604      	mov	r4, r0
 8000a02:	4608      	mov	r0, r1
 8000a04:	4611      	mov	r1, r2
 8000a06:	461a      	mov	r2, r3
 8000a08:	4623      	mov	r3, r4
 8000a0a:	80fb      	strh	r3, [r7, #6]
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	80bb      	strh	r3, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
 8000a14:	4613      	mov	r3, r2
 8000a16:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000a18:	883b      	ldrh	r3, [r7, #0]
 8000a1a:	887a      	ldrh	r2, [r7, #2]
 8000a1c:	88b9      	ldrh	r1, [r7, #4]
 8000a1e:	88f8      	ldrh	r0, [r7, #6]
 8000a20:	f7ff ff74 	bl	800090c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	883a      	ldrh	r2, [r7, #0]
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	8b3b      	ldrh	r3, [r7, #24]
 8000a30:	4619      	mov	r1, r3
 8000a32:	4610      	mov	r0, r2
 8000a34:	f7ff ffc3 	bl	80009be <LCD_FillColor>
	
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	80bb      	strh	r3, [r7, #4]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	3b20      	subs	r3, #32
 8000a56:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000a58:	88b9      	ldrh	r1, [r7, #4]
 8000a5a:	88f8      	ldrh	r0, [r7, #6]
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	2208      	movs	r2, #8
 8000a60:	f7ff ff54 	bl	800090c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000a64:	202c      	movs	r0, #44	; 0x2c
 8000a66:	f7ff fe19 	bl	800069c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
 8000a6e:	e024      	b.n	8000aba <LCD_DrawChar+0x7a>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000a70:	7b3a      	ldrb	r2, [r7, #12]
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	4915      	ldr	r1, [pc, #84]	; (8000acc <LCD_DrawChar+0x8c>)
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	440a      	add	r2, r1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000a80:	2300      	movs	r3, #0
 8000a82:	737b      	strb	r3, [r7, #13]
 8000a84:	e013      	b.n	8000aae <LCD_DrawChar+0x6e>
		{
			if ( ucTemp & 0x01 )
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <LCD_DrawChar+0x5a>
				LCD_Write_Data ( 0xF81F );
 8000a90:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000a94:	f7ff fe10 	bl	80006b8 <LCD_Write_Data>
 8000a98:	e003      	b.n	8000aa2 <LCD_DrawChar+0x62>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000a9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a9e:	f7ff fe0b 	bl	80006b8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	085b      	lsrs	r3, r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000aa8:	7b7b      	ldrb	r3, [r7, #13]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	737b      	strb	r3, [r7, #13]
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	d9e8      	bls.n	8000a86 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000ab4:	7bbb      	ldrb	r3, [r7, #14]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	73bb      	strb	r3, [r7, #14]
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d9d7      	bls.n	8000a70 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08002e0c 	.word	0x08002e0c

08000ad0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	603a      	str	r2, [r7, #0]
 8000ada:	80fb      	strh	r3, [r7, #6]
 8000adc:	460b      	mov	r3, r1
 8000ade:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000ae0:	e01c      	b.n	8000b1c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	2be8      	cmp	r3, #232	; 0xe8
 8000ae6:	d904      	bls.n	8000af2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000aec:	88bb      	ldrh	r3, [r7, #4]
 8000aee:	3310      	adds	r3, #16
 8000af0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000af8:	d903      	bls.n	8000b02 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000afa:	2300      	movs	r3, #0
 8000afc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	88b9      	ldrh	r1, [r7, #4]
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff98 	bl	8000a40 <LCD_DrawChar>
		
		pStr ++;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	3308      	adds	r3, #8
 8000b1a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1de      	bne.n	8000ae2 <LCD_DrawString+0x12>
		
	}
	
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 fb2f 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f863 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 f8e9 	bl	8000d14 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000b42:	f000 f999 	bl	8000e78 <MX_FSMC_Init>
  MX_SPI1_Init();
 8000b46:	f000 f8af 	bl	8000ca8 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b4a:	f000 f8a0 	bl	8000c8e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000b4e:	f7ff fd5a 	bl	8000606 <LCD_INIT>

  NRF24_Init();
 8000b52:	f7ff fcbb 	bl	80004cc <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 8000b56:	210a      	movs	r1, #10
 8000b58:	4827      	ldr	r0, [pc, #156]	; (8000bf8 <main+0xc8>)
 8000b5a:	f7ff fcde 	bl	800051a <NRF24_TxMode>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2120      	movs	r1, #32
 8000b62:	4826      	ldr	r0, [pc, #152]	; (8000bfc <main+0xcc>)
 8000b64:	f000 fe57 	bl	8001816 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter =0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  LCD_Clear(0,0,100,20,WHITE);
 8000b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2314      	movs	r3, #20
 8000b74:	2264      	movs	r2, #100	; 0x64
 8000b76:	2100      	movs	r1, #0
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ff3e 	bl	80009fa <LCD_Clear>
	  if(counter == 3){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d101      	bne.n	8000b88 <main+0x58>
		  counter =0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
	  }

	  if (NRF24_Transmit(TxData[counter]) == 1){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	015b      	lsls	r3, r3, #5
 8000b8c:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <main+0xd0>)
 8000b8e:	4413      	add	r3, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fce9 	bl	8000568 <NRF24_Transmit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d127      	bne.n	8000bec <main+0xbc>
		  GPIO_PinState dummy = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4817      	ldr	r0, [pc, #92]	; (8000bfc <main+0xcc>)
 8000ba0:	f000 fe22 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	70fb      	strb	r3, [r7, #3]
		  if(dummy == GPIO_PIN_SET  ){
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d109      	bne.n	8000bc2 <main+0x92>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <main+0xcc>)
 8000bb4:	f000 fe2f 	bl	8001816 <HAL_GPIO_WritePin>
			  HAL_Delay(280);
 8000bb8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8000bbc:	f000 fb4e 	bl	800125c <HAL_Delay>
 8000bc0:	e008      	b.n	8000bd4 <main+0xa4>
		  } else {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <main+0xcc>)
 8000bc8:	f000 fe25 	bl	8001816 <HAL_GPIO_WritePin>
			  HAL_Delay(280);
 8000bcc:	f44f 708c 	mov.w	r0, #280	; 0x118
 8000bd0:	f000 fb44 	bl	800125c <HAL_Delay>
		  }
		  LCD_DrawString(0,0,TxData[counter]);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	015b      	lsls	r3, r3, #5
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <main+0xd0>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff ff75 	bl	8000ad0 <LCD_DrawString>
		  counter++;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3301      	adds	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
	  }
	  HAL_Delay(1000);
 8000bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf0:	f000 fb34 	bl	800125c <HAL_Delay>
	  LCD_Clear(0,0,100,20,WHITE);
 8000bf4:	e7ba      	b.n	8000b6c <main+0x3c>
 8000bf6:	bf00      	nop
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	40010c00 	.word	0x40010c00
 8000c00:	20000008 	.word	0x20000008

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 f8d6 	bl	8002dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fe1d 	bl	800188c <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c58:	f000 f972 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2102      	movs	r1, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f88a 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c82:	f000 f95d 	bl	8000f40 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3740      	adds	r7, #64	; 0x40
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2028      	movs	r0, #40	; 0x28
 8000c98:	f000 fbdb 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c9c:	2028      	movs	r0, #40	; 0x28
 8000c9e:	f000 fbf4 	bl	800148a <HAL_NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <MX_SPI1_Init+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cdc:	2218      	movs	r2, #24
 8000cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cf4:	220a      	movs	r2, #10
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cfa:	f001 f9af 	bl	800205c <HAL_SPI_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d04:	f000 f91c 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000090 	.word	0x20000090
 8000d10:	40013000 	.word	0x40013000

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b4a      	ldr	r3, [pc, #296]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d58:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a40      	ldr	r2, [pc, #256]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a3a      	ldr	r2, [pc, #232]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d76:	f043 0320 	orr.w	r3, r3, #32
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0320 	and.w	r3, r3, #32
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <MX_GPIO_Init+0x14c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2160      	movs	r1, #96	; 0x60
 8000da4:	482f      	ldr	r0, [pc, #188]	; (8000e64 <MX_GPIO_Init+0x150>)
 8000da6:	f000 fd36 	bl	8001816 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	482d      	ldr	r0, [pc, #180]	; (8000e68 <MX_GPIO_Init+0x154>)
 8000db2:	f000 fd30 	bl	8001816 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2120      	movs	r1, #32
 8000dba:	482c      	ldr	r0, [pc, #176]	; (8000e6c <MX_GPIO_Init+0x158>)
 8000dbc:	f000 fd2b 	bl	8001816 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	482a      	ldr	r0, [pc, #168]	; (8000e70 <MX_GPIO_Init+0x15c>)
 8000dc6:	f000 fd26 	bl	8001816 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <MX_GPIO_Init+0x160>)
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4821      	ldr	r0, [pc, #132]	; (8000e64 <MX_GPIO_Init+0x150>)
 8000de0:	f000 fb6e 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000de4:	2360      	movs	r3, #96	; 0x60
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	481a      	ldr	r0, [pc, #104]	; (8000e64 <MX_GPIO_Init+0x150>)
 8000dfc:	f000 fb60 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4813      	ldr	r0, [pc, #76]	; (8000e68 <MX_GPIO_Init+0x154>)
 8000e1a:	f000 fb51 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e1e:	2320      	movs	r3, #32
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0318 	add.w	r3, r7, #24
 8000e32:	4619      	mov	r1, r3
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_GPIO_Init+0x158>)
 8000e36:	f000 fb43 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_GPIO_Init+0x15c>)
 8000e52:	f000 fb35 	bl	80014c0 <HAL_GPIO_Init>

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40011400 	.word	0x40011400
 8000e6c:	40010c00 	.word	0x40010c00
 8000e70:	40011800 	.word	0x40011800
 8000e74:	10110000 	.word	0x10110000

08000e78 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000e92:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e96:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000e9a:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <MX_FSMC_Init+0xc0>)
 8000e9c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ed0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ef6:	23ff      	movs	r3, #255	; 0xff
 8000ef8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000efa:	230f      	movs	r3, #15
 8000efc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000efe:	2310      	movs	r3, #16
 8000f00:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f02:	2311      	movs	r3, #17
 8000f04:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <MX_FSMC_Init+0xbc>)
 8000f12:	f001 fe0f 	bl	8002b34 <HAL_SRAM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000f1c:	f000 f810 	bl	8000f40 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_FSMC_Init+0xc4>)
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <MX_FSMC_Init+0xc4>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000e8 	.word	0x200000e8
 8000f38:	a0000104 	.word	0xa0000104
 8000f3c:	40010000 	.word	0x40010000

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x60>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_MspInit+0x60>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000

08000fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <HAL_SPI_MspInit+0x88>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d12f      	bne.n	8001030 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_SPI_MspInit+0x8c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_SPI_MspInit+0x8c>)
 8000fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_SPI_MspInit+0x8c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_SPI_MspInit+0x8c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_SPI_MspInit+0x8c>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_SPI_MspInit+0x8c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001000:	23a0      	movs	r3, #160	; 0xa0
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_SPI_MspInit+0x90>)
 8001014:	f000 fa54 	bl	80014c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_SPI_MspInit+0x90>)
 800102c:	f000 fa48 	bl	80014c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40013000 	.word	0x40013000
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800

08001044 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_FSMC_MspInit+0x78>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d129      	bne.n	80010b4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_FSMC_MspInit+0x78>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_FSMC_MspInit+0x7c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <HAL_FSMC_MspInit+0x7c>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_FSMC_MspInit+0x7c>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800107e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001082:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <HAL_FSMC_MspInit+0x80>)
 8001094:	f000 fa14 	bl	80014c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001098:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800109c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_FSMC_MspInit+0x84>)
 80010ae:	f000 fa07 	bl	80014c0 <HAL_GPIO_Init>
 80010b2:	e000      	b.n	80010b6 <HAL_FSMC_MspInit+0x72>
    return;
 80010b4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000130 	.word	0x20000130
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40011800 	.word	0x40011800
 80010c8:	40011400 	.word	0x40011400

080010cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80010d4:	f7ff ffb6 	bl	8001044 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f87d 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001132:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001136:	f000 fb87 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}

0800113e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
	...

0800114c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001172:	f7ff ffe4 	bl	800113e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f001 fe01 	bl	8002d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117a:	f7ff fcd9 	bl	8000b30 <main>
  bx lr
 800117e:	4770      	bx	lr
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001188:	08003414 	.word	0x08003414
  ldr r2, =_sbss
 800118c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001190:	20000138 	.word	0x20000138

08001194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_2_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x28>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x28>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f947 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff feca 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f95f 	bl	80014a6 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001200:	f000 f927 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000068 	.word	0x20000068
 800121c:	20000070 	.word	0x20000070
 8001220:	2000006c 	.word	0x2000006c

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x1c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x20>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <HAL_IncTick+0x20>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	20000070 	.word	0x20000070
 8001244:	20000134 	.word	0x20000134

08001248 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_GetTick+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000134 	.word	0x20000134

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff fff0 	bl	8001248 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffe0 	bl	8001248 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000070 	.word	0x20000070

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4906      	ldr	r1, [pc, #24]	; (800133c <__NVIC_EnableIRQ+0x34>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800141c:	f7ff ff90 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff2d 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff42 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff35 	bl	8001308 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b08b      	sub	sp, #44	; 0x2c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d2:	e179      	b.n	80017c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d4:	2201      	movs	r2, #1
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8168 	bne.w	80017c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a96      	ldr	r2, [pc, #600]	; (8001750 <HAL_GPIO_Init+0x290>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d05e      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 80014fc:	4a94      	ldr	r2, [pc, #592]	; (8001750 <HAL_GPIO_Init+0x290>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d875      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001502:	4a94      	ldr	r2, [pc, #592]	; (8001754 <HAL_GPIO_Init+0x294>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d058      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001508:	4a92      	ldr	r2, [pc, #584]	; (8001754 <HAL_GPIO_Init+0x294>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d86f      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800150e:	4a92      	ldr	r2, [pc, #584]	; (8001758 <HAL_GPIO_Init+0x298>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d052      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001514:	4a90      	ldr	r2, [pc, #576]	; (8001758 <HAL_GPIO_Init+0x298>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d869      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800151a:	4a90      	ldr	r2, [pc, #576]	; (800175c <HAL_GPIO_Init+0x29c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d04c      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001520:	4a8e      	ldr	r2, [pc, #568]	; (800175c <HAL_GPIO_Init+0x29c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d863      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001526:	4a8e      	ldr	r2, [pc, #568]	; (8001760 <HAL_GPIO_Init+0x2a0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d046      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 800152c:	4a8c      	ldr	r2, [pc, #560]	; (8001760 <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d85d      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d82a      	bhi.n	800158c <HAL_GPIO_Init+0xcc>
 8001536:	2b12      	cmp	r3, #18
 8001538:	d859      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <HAL_GPIO_Init+0x80>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	080015bb 	.word	0x080015bb
 8001544:	08001595 	.word	0x08001595
 8001548:	080015a7 	.word	0x080015a7
 800154c:	080015e9 	.word	0x080015e9
 8001550:	080015ef 	.word	0x080015ef
 8001554:	080015ef 	.word	0x080015ef
 8001558:	080015ef 	.word	0x080015ef
 800155c:	080015ef 	.word	0x080015ef
 8001560:	080015ef 	.word	0x080015ef
 8001564:	080015ef 	.word	0x080015ef
 8001568:	080015ef 	.word	0x080015ef
 800156c:	080015ef 	.word	0x080015ef
 8001570:	080015ef 	.word	0x080015ef
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015ef 	.word	0x080015ef
 800157c:	080015ef 	.word	0x080015ef
 8001580:	080015ef 	.word	0x080015ef
 8001584:	0800159d 	.word	0x0800159d
 8001588:	080015b1 	.word	0x080015b1
 800158c:	4a75      	ldr	r2, [pc, #468]	; (8001764 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001592:	e02c      	b.n	80015ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e029      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e024      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	3308      	adds	r3, #8
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e01f      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	330c      	adds	r3, #12
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e01a      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c2:	2304      	movs	r3, #4
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e013      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d0:	2308      	movs	r3, #8
 80015d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	611a      	str	r2, [r3, #16]
          break;
 80015da:	e009      	b.n	80015f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	615a      	str	r2, [r3, #20]
          break;
 80015e6:	e003      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          break;
 80015ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2bff      	cmp	r3, #255	; 0xff
 80015f4:	d801      	bhi.n	80015fa <HAL_GPIO_Init+0x13a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	e001      	b.n	80015fe <HAL_GPIO_Init+0x13e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d802      	bhi.n	800160c <HAL_GPIO_Init+0x14c>
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x152>
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	3b08      	subs	r3, #8
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	210f      	movs	r1, #15
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	6a39      	ldr	r1, [r7, #32]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80c1 	beq.w	80017c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_GPIO_Init+0x2a8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a48      	ldr	r2, [pc, #288]	; (8001768 <HAL_GPIO_Init+0x2a8>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_GPIO_Init+0x2a8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001658:	4a44      	ldr	r2, [pc, #272]	; (800176c <HAL_GPIO_Init+0x2ac>)
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3c      	ldr	r2, [pc, #240]	; (8001770 <HAL_GPIO_Init+0x2b0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d01f      	beq.n	80016c4 <HAL_GPIO_Init+0x204>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3b      	ldr	r2, [pc, #236]	; (8001774 <HAL_GPIO_Init+0x2b4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d019      	beq.n	80016c0 <HAL_GPIO_Init+0x200>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1fc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a39      	ldr	r2, [pc, #228]	; (800177c <HAL_GPIO_Init+0x2bc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1f8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <HAL_GPIO_Init+0x2c0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1f4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a37      	ldr	r2, [pc, #220]	; (8001784 <HAL_GPIO_Init+0x2c4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1f0>
 80016ac:	2305      	movs	r3, #5
 80016ae:	e00a      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b0:	2306      	movs	r3, #6
 80016b2:	e008      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b4:	2304      	movs	r3, #4
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016c4:	2300      	movs	r3, #0
 80016c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016d6:	4925      	ldr	r1, [pc, #148]	; (800176c <HAL_GPIO_Init+0x2ac>)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4924      	ldr	r1, [pc, #144]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4920      	ldr	r1, [pc, #128]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001708:	4013      	ands	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	491a      	ldr	r1, [pc, #104]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	4916      	ldr	r1, [pc, #88]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001730:	4013      	ands	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d025      	beq.n	800178c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4910      	ldr	r1, [pc, #64]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
 800174c:	e025      	b.n	800179a <HAL_GPIO_Init+0x2da>
 800174e:	bf00      	nop
 8001750:	10320000 	.word	0x10320000
 8001754:	10310000 	.word	0x10310000
 8001758:	10220000 	.word	0x10220000
 800175c:	10210000 	.word	0x10210000
 8001760:	10120000 	.word	0x10120000
 8001764:	10110000 	.word	0x10110000
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000
 8001770:	40010800 	.word	0x40010800
 8001774:	40010c00 	.word	0x40010c00
 8001778:	40011000 	.word	0x40011000
 800177c:	40011400 	.word	0x40011400
 8001780:	40011800 	.word	0x40011800
 8001784:	40011c00 	.word	0x40011c00
 8001788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_GPIO_Init+0x324>)
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4913      	ldr	r1, [pc, #76]	; (80017e4 <HAL_GPIO_Init+0x324>)
 8001796:	4013      	ands	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]
 80017b2:	e006      	b.n	80017c2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4909      	ldr	r1, [pc, #36]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80017be:	4013      	ands	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f ae7e 	bne.w	80014d4 <HAL_GPIO_Init+0x14>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	372c      	adds	r7, #44	; 0x2c
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e001      	b.n	800180a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
 8001822:	4613      	mov	r3, r2
 8001824:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001826:	787b      	ldrb	r3, [r7, #1]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182c:	887a      	ldrh	r2, [r7, #2]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001832:	e003      	b.n	800183c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	611a      	str	r2, [r3, #16]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
	...

08001848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f806 	bl	8001878 <HAL_GPIO_EXTI_Callback>
  }
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e272      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8087 	beq.w	80019ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b8:	4b8f      	ldr	r3, [pc, #572]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d112      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
 80018c4:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d10b      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x12c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d168      	bne.n	80019b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e24c      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x76>
 80018f4:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a7f      	ldr	r2, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e02e      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x98>
 800190a:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7a      	ldr	r2, [pc, #488]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e01d      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0xbc>
 800192e:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a71      	ldr	r2, [pc, #452]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001948:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6a      	ldr	r2, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a67      	ldr	r2, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fc6e 	bl	8001248 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fc6a 	bl	8001248 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e200      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0xe4>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fc5a 	bl	8001248 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fc56 	bl	8001248 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1ec      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x10c>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c6:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d11c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1c0      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4939      	ldr	r1, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	e03a      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fc0f 	bl	8001248 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fc0b 	bl	8001248 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1a1      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4927      	ldr	r1, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fbee 	bl	8001248 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fbea 	bl	8001248 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e180      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03a      	beq.n	8001b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fbce 	bl	8001248 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fbca 	bl	8001248 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e160      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 faa6 	bl	8002020 <RCC_Delay>
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fbb4 	bl	8001248 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae2:	e00f      	b.n	8001b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fbb0 	bl	8001248 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e146      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	42420000 	.word	0x42420000
 8001b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b92      	ldr	r3, [pc, #584]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e9      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a6 	beq.w	8001c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a87      	ldr	r2, [pc, #540]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b82      	ldr	r3, [pc, #520]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb71 	bl	8001248 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff fb6d 	bl	8001248 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e103      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x312>
 8001b90:	4b6f      	ldr	r3, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a6e      	ldr	r2, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e02d      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x334>
 8001ba6:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a69      	ldr	r2, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a66      	ldr	r2, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x356>
 8001bc8:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a60      	ldr	r2, [pc, #384]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a5a      	ldr	r2, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a57      	ldr	r2, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb21 	bl	8001248 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fb1d 	bl	8001248 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0b1      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x37e>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb0b 	bl	8001248 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fb07 	bl	8001248 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e09b      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a3b      	ldr	r2, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8087 	beq.w	8001d82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d061      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d146      	bne.n	8001d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fadb 	bl	8001248 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff fad7 	bl	8001248 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e06d      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4921      	ldr	r1, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a19      	ldr	r1, [r3, #32]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	491b      	ldr	r1, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff faab 	bl	8001248 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff faa7 	bl	8001248 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e03d      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46a>
 8001d14:	e035      	b.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fa94 	bl	8001248 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff fa90 	bl	8001248 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e026      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x498>
 8001d42:	e01e      	b.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e019      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_OscConfig+0x500>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0d0      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b6a      	ldr	r3, [pc, #424]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4965      	ldr	r1, [pc, #404]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b8      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e04:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	494d      	ldr	r1, [pc, #308]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d040      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e073      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06b      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4936      	ldr	r1, [pc, #216]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff f9e2 	bl	8001248 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff f9de 	bl	8001248 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e053      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d210      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4922      	ldr	r1, [pc, #136]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e032      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4916      	ldr	r1, [pc, #88]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	490e      	ldr	r1, [pc, #56]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1e:	f000 f821 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	5ccb      	ldrb	r3, [r1, r3]
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1cc>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1d0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f940 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40021000 	.word	0x40021000
 8001f58:	080033fc 	.word	0x080033fc
 8001f5c:	20000068 	.word	0x20000068
 8001f60:	2000006c 	.word	0x2000006c

08001f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f64:	b490      	push	{r4, r7}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f6c:	1d3c      	adds	r4, r7, #4
 8001f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f74:	f240 2301 	movw	r3, #513	; 0x201
 8001f78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x46>
 8001fa2:	e02b      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fa6:	623b      	str	r3, [r7, #32]
      break;
 8001fa8:	e02b      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	0c9b      	lsrs	r3, r3, #18
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3328      	adds	r3, #40	; 0x28
 8001fb4:	443b      	add	r3, r7
 8001fb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0c5b      	lsrs	r3, r3, #17
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	3328      	adds	r3, #40	; 0x28
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fde:	fb03 f202 	mul.w	r2, r3, r2
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fea:	e004      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	623b      	str	r3, [r7, #32]
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ffe:	623b      	str	r3, [r7, #32]
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	6a3b      	ldr	r3, [r7, #32]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bc90      	pop	{r4, r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	08002dfc 	.word	0x08002dfc
 8002014:	40021000 	.word	0x40021000
 8002018:	007a1200 	.word	0x007a1200
 800201c:	003d0900 	.word	0x003d0900

08002020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <RCC_Delay+0x34>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <RCC_Delay+0x38>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800203c:	bf00      	nop
  }
  while (Delay --);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <RCC_Delay+0x1c>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000068 	.word	0x20000068
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e076      	b.n	800215c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800207e:	d009      	beq.n	8002094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
 8002086:	e005      	b.n	8002094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe ff7e 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	ea42 0103 	orr.w	r1, r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	0c1a      	lsrs	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f002 0204 	and.w	r2, r2, #4
 800213a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_SPI_Transmit+0x22>
 8002182:	2302      	movs	r3, #2
 8002184:	e126      	b.n	80023d4 <HAL_SPI_Transmit+0x270>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800218e:	f7ff f85b 	bl	8001248 <HAL_GetTick>
 8002192:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d002      	beq.n	80021aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
 80021a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021a8:	e10b      	b.n	80023c2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_Transmit+0x52>
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021ba:	e102      	b.n	80023c2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2203      	movs	r2, #3
 80021c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	88fa      	ldrh	r2, [r7, #6]
 80021d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	88fa      	ldrh	r2, [r7, #6]
 80021da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002202:	d10f      	bne.n	8002224 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002212:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002222:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d007      	beq.n	8002242 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800224a:	d14b      	bne.n	80022e4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_SPI_Transmit+0xf6>
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d13e      	bne.n	80022d8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	1c9a      	adds	r2, r3, #2
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800227e:	e02b      	b.n	80022d8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d112      	bne.n	80022b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	1c9a      	adds	r2, r3, #2
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80022b2:	e011      	b.n	80022d8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b4:	f7fe ffc8 	bl	8001248 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d803      	bhi.n	80022cc <HAL_SPI_Transmit+0x168>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ca:	d102      	bne.n	80022d2 <HAL_SPI_Transmit+0x16e>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022d6:	e074      	b.n	80023c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ce      	bne.n	8002280 <HAL_SPI_Transmit+0x11c>
 80022e2:	e04c      	b.n	800237e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_SPI_Transmit+0x18e>
 80022ec:	8afb      	ldrh	r3, [r7, #22]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d140      	bne.n	8002374 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	330c      	adds	r3, #12
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002318:	e02c      	b.n	8002374 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	d113      	bne.n	8002350 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	330c      	adds	r3, #12
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	86da      	strh	r2, [r3, #54]	; 0x36
 800234e:	e011      	b.n	8002374 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002350:	f7fe ff7a 	bl	8001248 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d803      	bhi.n	8002368 <HAL_SPI_Transmit+0x204>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002366:	d102      	bne.n	800236e <HAL_SPI_Transmit+0x20a>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002372:	e026      	b.n	80023c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1cd      	bne.n	800231a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	6839      	ldr	r1, [r7, #0]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fbb8 	bl	8002af8 <SPI_EndRxTxTransaction>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	77fb      	strb	r3, [r7, #31]
 80023be:	e000      	b.n	80023c2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80023c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f8:	d112      	bne.n	8002420 <HAL_SPI_Receive+0x44>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10e      	bne.n	8002420 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2204      	movs	r2, #4
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f8f1 	bl	80025fe <HAL_SPI_TransmitReceive>
 800241c:	4603      	mov	r3, r0
 800241e:	e0ea      	b.n	80025f6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_SPI_Receive+0x52>
 800242a:	2302      	movs	r3, #2
 800242c:	e0e3      	b.n	80025f6 <HAL_SPI_Receive+0x21a>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002436:	f7fe ff07 	bl	8001248 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d002      	beq.n	800244e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002448:	2302      	movs	r3, #2
 800244a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800244c:	e0ca      	b.n	80025e4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_SPI_Receive+0x7e>
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800245e:	e0c1      	b.n	80025e4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2204      	movs	r2, #4
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	88fa      	ldrh	r2, [r7, #6]
 800247e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a6:	d10f      	bne.n	80024c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d007      	beq.n	80024e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d162      	bne.n	80025b4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024ee:	e02e      	b.n	800254e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d115      	bne.n	800252a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f103 020c 	add.w	r2, r3, #12
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002528:	e011      	b.n	800254e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252a:	f7fe fe8d 	bl	8001248 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d803      	bhi.n	8002542 <HAL_SPI_Receive+0x166>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002540:	d102      	bne.n	8002548 <HAL_SPI_Receive+0x16c>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800254c:	e04a      	b.n	80025e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1cb      	bne.n	80024f0 <HAL_SPI_Receive+0x114>
 8002558:	e031      	b.n	80025be <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d113      	bne.n	8002590 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	b292      	uxth	r2, r2
 8002574:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	1c9a      	adds	r2, r3, #2
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800258e:	e011      	b.n	80025b4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002590:	f7fe fe5a 	bl	8001248 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d803      	bhi.n	80025a8 <HAL_SPI_Receive+0x1cc>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a6:	d102      	bne.n	80025ae <HAL_SPI_Receive+0x1d2>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025b2:	e017      	b.n	80025e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1cd      	bne.n	800255a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fa46 	bl	8002a54 <SPI_EndRxTransaction>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
 80025e0:	e000      	b.n	80025e4 <HAL_SPI_Receive+0x208>
  }

error :
 80025e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08c      	sub	sp, #48	; 0x30
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800260c:	2301      	movs	r3, #1
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x26>
 8002620:	2302      	movs	r3, #2
 8002622:	e18a      	b.n	800293a <HAL_SPI_TransmitReceive+0x33c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800262c:	f7fe fe0c 	bl	8001248 <HAL_GetTick>
 8002630:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800264a:	2b01      	cmp	r3, #1
 800264c:	d00f      	beq.n	800266e <HAL_SPI_TransmitReceive+0x70>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002654:	d107      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x68>
 800265e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002662:	2b04      	cmp	r3, #4
 8002664:	d003      	beq.n	800266e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800266c:	e15b      	b.n	8002926 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x82>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x82>
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002686:	e14e      	b.n	8002926 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b04      	cmp	r3, #4
 8002692:	d003      	beq.n	800269c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2205      	movs	r2, #5
 8002698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	887a      	ldrh	r2, [r7, #2]
 80026be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d007      	beq.n	80026f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f8:	d178      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_SPI_TransmitReceive+0x10a>
 8002702:	8b7b      	ldrh	r3, [r7, #26]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d166      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	1c9a      	adds	r2, r3, #2
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272c:	e053      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d11b      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x176>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_SPI_TransmitReceive+0x176>
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d113      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	881a      	ldrh	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d119      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x1b8>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d014      	beq.n	80027b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	b292      	uxth	r2, r2
 8002798:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	1c9a      	adds	r2, r3, #2
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027b2:	2301      	movs	r3, #1
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027b6:	f7fe fd47 	bl	8001248 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d807      	bhi.n	80027d6 <HAL_SPI_TransmitReceive+0x1d8>
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d003      	beq.n	80027d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027d4:	e0a7      	b.n	8002926 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1a6      	bne.n	800272e <HAL_SPI_TransmitReceive+0x130>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1a1      	bne.n	800272e <HAL_SPI_TransmitReceive+0x130>
 80027ea:	e07c      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_SPI_TransmitReceive+0x1fc>
 80027f4:	8b7b      	ldrh	r3, [r7, #26]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d16b      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002820:	e057      	b.n	80028d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d11c      	bne.n	800286a <HAL_SPI_TransmitReceive+0x26c>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d017      	beq.n	800286a <HAL_SPI_TransmitReceive+0x26c>
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d114      	bne.n	800286a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d119      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x2ae>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d014      	beq.n	80028ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a8:	2301      	movs	r3, #1
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028ac:	f7fe fccc 	bl	8001248 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d803      	bhi.n	80028c4 <HAL_SPI_TransmitReceive+0x2c6>
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c2:	d102      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x2cc>
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028d0:	e029      	b.n	8002926 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1a2      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x224>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d19d      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f904 	bl	8002af8 <SPI_EndRxTxTransaction>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002902:	e010      	b.n	8002926 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	e000      	b.n	8002926 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002924:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800293a:	4618      	mov	r0, r3
 800293c:	3730      	adds	r7, #48	; 0x30
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002954:	f7fe fc78 	bl	8001248 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002964:	f7fe fc70 	bl	8001248 <HAL_GetTick>
 8002968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	015b      	lsls	r3, r3, #5
 8002970:	0d1b      	lsrs	r3, r3, #20
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297a:	e054      	b.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002982:	d050      	beq.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002984:	f7fe fc60 	bl	8001248 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	429a      	cmp	r2, r3
 8002992:	d902      	bls.n	800299a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d13d      	bne.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b2:	d111      	bne.n	80029d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029bc:	d004      	beq.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c6:	d107      	bne.n	80029d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e0:	d10f      	bne.n	8002a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e017      	b.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d19b      	bne.n	800297c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000068 	.word	0x20000068

08002a54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a68:	d111      	bne.n	8002a8e <SPI_EndRxTransaction+0x3a>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a72:	d004      	beq.n	8002a7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7c:	d107      	bne.n	8002a8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a96:	d117      	bne.n	8002ac8 <SPI_EndRxTransaction+0x74>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d112      	bne.n	8002ac8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2101      	movs	r1, #1
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff49 	bl	8002944 <SPI_WaitFlagStateUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01a      	beq.n	8002aee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e013      	b.n	8002af0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff ff36 	bl	8002944 <SPI_WaitFlagStateUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e000      	b.n	8002af0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff ff18 	bl	8002944 <SPI_WaitFlagStateUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e000      	b.n	8002b2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_SRAM_Init+0x1c>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d101      	bne.n	8002b54 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e038      	b.n	8002bc6 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7fe faaf 	bl	80010cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3308      	adds	r3, #8
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f000 f829 	bl	8002bd0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	f000 f88b 	bl	8002ca4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6858      	ldr	r0, [r3, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	f000 f8b6 	bl	8002d0c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	6892      	ldr	r2, [r2, #8]
 8002ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	f041 0101 	orr.w	r1, r1, #1
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	f023 0101 	bic.w	r1, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d102      	bne.n	8002c00 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002bfa:	2340      	movs	r3, #64	; 0x40
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e001      	b.n	8002c04 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002c10:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002c16:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002c1c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002c22:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002c28:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002c2e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002c34:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002c3a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002c40:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <FSMC_NORSRAM_Init+0xd0>)
 8002c60:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c68:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002c70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	ea02 0103 	and.w	r1, r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4319      	orrs	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	0008fb7f 	.word	0x0008fb7f

08002ca4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	051b      	lsls	r3, r3, #20
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	3b02      	subs	r3, #2
 8002cea:	061b      	lsls	r3, r3, #24
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	3201      	adds	r2, #1
 8002cf8:	4319      	orrs	r1, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d20:	d11d      	bne.n	8002d5e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	6811      	ldr	r1, [r2, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	6852      	ldr	r2, [r2, #4]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	0212      	lsls	r2, r2, #8
 8002d40:	4311      	orrs	r1, r2
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	6992      	ldr	r2, [r2, #24]
 8002d46:	4311      	orrs	r1, r2
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	68d2      	ldr	r2, [r2, #12]
 8002d4c:	0412      	lsls	r2, r2, #16
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	ea43 0102 	orr.w	r1, r3, r2
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002d5c:	e005      	b.n	8002d6a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	cff00000 	.word	0xcff00000

08002d7c <__libc_init_array>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	2600      	movs	r6, #0
 8002d80:	4d0c      	ldr	r5, [pc, #48]	; (8002db4 <__libc_init_array+0x38>)
 8002d82:	4c0d      	ldr	r4, [pc, #52]	; (8002db8 <__libc_init_array+0x3c>)
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	42a6      	cmp	r6, r4
 8002d8a:	d109      	bne.n	8002da0 <__libc_init_array+0x24>
 8002d8c:	f000 f822 	bl	8002dd4 <_init>
 8002d90:	2600      	movs	r6, #0
 8002d92:	4d0a      	ldr	r5, [pc, #40]	; (8002dbc <__libc_init_array+0x40>)
 8002d94:	4c0a      	ldr	r4, [pc, #40]	; (8002dc0 <__libc_init_array+0x44>)
 8002d96:	1b64      	subs	r4, r4, r5
 8002d98:	10a4      	asrs	r4, r4, #2
 8002d9a:	42a6      	cmp	r6, r4
 8002d9c:	d105      	bne.n	8002daa <__libc_init_array+0x2e>
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
 8002da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da4:	4798      	blx	r3
 8002da6:	3601      	adds	r6, #1
 8002da8:	e7ee      	b.n	8002d88 <__libc_init_array+0xc>
 8002daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dae:	4798      	blx	r3
 8002db0:	3601      	adds	r6, #1
 8002db2:	e7f2      	b.n	8002d9a <__libc_init_array+0x1e>
 8002db4:	0800340c 	.word	0x0800340c
 8002db8:	0800340c 	.word	0x0800340c
 8002dbc:	0800340c 	.word	0x0800340c
 8002dc0:	08003410 	.word	0x08003410

08002dc4 <memset>:
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4402      	add	r2, r0
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d100      	bne.n	8002dce <memset+0xa>
 8002dcc:	4770      	bx	lr
 8002dce:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd2:	e7f9      	b.n	8002dc8 <memset+0x4>

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	bf00      	nop
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
